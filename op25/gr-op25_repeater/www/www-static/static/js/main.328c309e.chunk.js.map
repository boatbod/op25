{"version":3,"sources":["redux/app/hooks.ts","redux/slices/interface/interfaceSlice.ts","redux/slices/preferences/preferencesSlice.ts","components/MenuDrawer.tsx","components/PreferencesDrawer.tsx","components/AppBarWithToolbar.tsx","components/TopMenuBarAndDrawers.tsx","utils/axios.ts","lib/op25/index.ts","redux/slices/op25/op25Slice.ts","components/ChannelDisplay.tsx","pages/ReceiverUi.tsx","App.tsx","redux/app/store.ts","Theme.tsx","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","interfaceSlice","createSlice","name","initialState","isConnected","isMenuDrawerOpen","isMobileMenuDrawerOpen","isPreferencesDrawerOpen","reducers","toggleMenuDrawerOpen","state","setMenuDrawerOpen","action","payload","toggleMobileMenuDrawerOpen","setMobileMenuDrawerOpen","togglePreferencesDrawerOpen","setPreferencesDrawerOpen","actions","interface","isPreferencesOpen","preferencesSlice","darkmode","showChannelInTitle","toogleDarkMode","setDarkMode","toogleShowChannelInTitle","setShowChannelInTitle","selectIsDarkMode","preferences","selectShowChannelInTitle","useStyles","makeStyles","theme","createStyles","drawer","breakpoints","up","width","flexShrink","drawerPaper","toolbar","mixins","MenuDrawerContent","isDarkMode","AppBar","position","color","Toolbar","Typography","variant","noWrap","Divider","List","ListItem","button","selected","ListItemIcon","Home","ListItemText","History","Build","PieChart","InfoRounded","container","undefined","globalThis","document","body","MenuDrawer","dispatch","isOpen","mobileOpen","classes","useTheme","className","Hidden","smUp","implementation","SwipeableDrawer","anchor","direction","open","onOpen","onClose","paper","ModalProps","keepMounted","xsDown","Drawer","appBar","gridSpace","paddingLeft","spacing","preferencesHeader","props","palette","common","white","blue","checkboxMaxWidth","PreferencesDrawer","isShowChannelInTitle","Grid","item","xs","justifyContent","IconButton","onClick","Close","FormGroup","FormControlLabel","control","Switch","checked","onChange","e","target","label","grow","flexGrow","content","padding","AppBarWithToolbar","edge","Menu","Tooltip","title","Settings","root","display","TopMenuBarAndDrawers","Axios","axios","create","baseURL","process","method","headers","timeout","withCredentials","OP25","_store","this","store","a","addToSendQueue","command","arg1","arg2","getState","channels","op25","length","forEach","channel","id","channelId","talkgroupId","debugLevel","instance","terminalConfig","send_queue","sendQueue","createAsyncThunk","_","queue","emptySendQueue","post","response","status","console","log","toString","statusText","data","send_command","unshiftOnSendQueue","pushToSendQueue","op25Slice","push","unshift","extraReducers","builder","addCase","fulfilled","update","json_type","channelData","Number","parseInt","encrypted","frequency","freq","mode","sourceAddress","srcaddr","sourceTag","srctag","stream","msgqid","ppm","systemName","system","tdma","tgID","tgid","tgTag","tag","channel_update","config","module","terminalType","terminal_type","cursesPlotInterval","curses_plot_interval","httpPlotInterval","http_plot_interval","httpPlotDirectory","http_plot_directory","tuningStepSizeLarge","tuning_step_large","tuningStepSizeSmall","tuning_step_small","terminal_config","err","selectChannels","selectStepSizes","stepSizeSmall","stepSizeLarge","minWidth","border","cardContent","paddingRight","borderLeftStyle","borderRightStyle","borderWidth","cardHeader","backgroundColor","isEncrypted","primary","main","borderTopStyle","borderColor","margin","textAlign","height","contrastText","currentchannel","marginLeft","marginBottom","overflow","grid","gridRoot","fontSize","rowRoot","cellRoot","cardActions","paddingBottom","borderBottomStyle","flexWrap","actionbuttons","ChannelDisplay","getInstance","find","selectChannel","columns","field","hide","sortable","align","renderHeader","renderCell","params","getValue","enterDelay","placement","rows","stateName","stateValue","description","toFixed","onGoToTalkgroup","prompt","sendHoldOnChannel","onHoldTalkgroup","onReloadChannel","sendReloadOnChannel","onBlacklistTalkgroup","sendBlacklistOnChannel","onWhitelistTalkgroup","sendWhitelistOnChannel","onLogVerboseChange","verboseLevel","sendSetDebugOnChannel","onSkipTalkgroup","sendSkipOnChannel","Card","CardHeader","titleTypographyProps","CardContent","component","row","cell","headerHeight","isRowSelectable","hideFooter","CardActions","Button","size","headingText","getContrastText","background","default","MainUi","map","md","down","paddingTop","drawerWidth","tempDebugContent","marginTop","App","useEffect","updateTimer","setInterval","sendUpdateChannels","sendQueueTimer","clearInterval","ReceiverUi","configureStore","reducer","interfaceReducer","op25Reducer","preferencesReducer","useDarkMode","createTheme","type","secondary","Theme","children","ThemeProvider","appStore","setStore","ReactDOM","render","StrictMode","CssBaseline","getElementById"],"mappings":"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","file":"static/js/main.328c309e.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport type { RootState, AppDispatch } from \"./store\";\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../app/store\";\nimport { InterfaceState } from \"../../../types/InterfaceState\";\n\nconst initialState: InterfaceState = {\n  isConnected: false,\n  isMenuDrawerOpen: true,\n  isMobileMenuDrawerOpen: false,\n  isPreferencesDrawerOpen: false,\n};\n\nexport const interfaceSlice = createSlice({\n  name: \"interface\",\n  initialState,\n  reducers: {\n    toggleMenuDrawerOpen: (state) => {\n      state.isMenuDrawerOpen = !state.isMenuDrawerOpen;\n    },\n    setMenuDrawerOpen: (state, action: PayloadAction<boolean>) => {\n      state.isMenuDrawerOpen = action.payload;\n    },\n    toggleMobileMenuDrawerOpen: (state) => {\n      state.isMobileMenuDrawerOpen = !state.isMobileMenuDrawerOpen;\n    },\n    setMobileMenuDrawerOpen: (state, action: PayloadAction<boolean>) => {\n      state.isMobileMenuDrawerOpen = action.payload;\n    },\n    togglePreferencesDrawerOpen: (state) => {\n      state.isPreferencesDrawerOpen = !state.isPreferencesDrawerOpen;\n    },\n    setPreferencesDrawerOpen: (state, action: PayloadAction<boolean>) => {\n      state.isPreferencesDrawerOpen = action.payload;\n    },\n  },\n});\n\nexport const {\n  toggleMenuDrawerOpen,\n  setMenuDrawerOpen,\n  toggleMobileMenuDrawerOpen,\n  setMobileMenuDrawerOpen,\n  togglePreferencesDrawerOpen,\n  setPreferencesDrawerOpen,\n} = interfaceSlice.actions;\n\nexport const isMenuDrawerOpen = (state: RootState): boolean =>\n  state.interface.isMenuDrawerOpen;\n\nexport const isMobileMenuDrawerOpen = (state: RootState): boolean =>\n  state.interface.isMobileMenuDrawerOpen;\n\nexport const isPreferencesOpen = (state: RootState): boolean =>\n  state.interface.isPreferencesDrawerOpen;\n\nexport default interfaceSlice.reducer;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../app/store\";\nimport { PreferencesState } from \"../../../types/PreferencesState\";\n\nconst initialState: PreferencesState = {\n  darkmode: true,\n  showChannelInTitle: true,\n};\n\nexport const preferencesSlice = createSlice({\n  name: \"interface\",\n  initialState,\n  reducers: {\n    toogleDarkMode: (state) => {\n      state.darkmode = !state.darkmode;\n    },\n    setDarkMode: (state, action: PayloadAction<boolean>) => {\n      state.darkmode = action.payload;\n    },\n    toogleShowChannelInTitle: (state) => {\n      state.showChannelInTitle = !state.showChannelInTitle;\n    },\n    setShowChannelInTitle: (state, action: PayloadAction<boolean>) => {\n      state.showChannelInTitle = action.payload;\n    },\n  },\n});\n\nexport const {\n  toogleDarkMode,\n  setDarkMode,\n  toogleShowChannelInTitle,\n  setShowChannelInTitle,\n} = preferencesSlice.actions;\n\nexport const selectIsDarkMode = (state: RootState) =>\n  state.preferences.darkmode;\n\nexport const selectShowChannelInTitle = (state: RootState) =>\n  state.preferences.showChannelInTitle;\n\nexport default preferencesSlice.reducer;\n","import { useAppDispatch, useAppSelector } from \"../redux/app/hooks\";\nimport {\n  isMenuDrawerOpen,\n  isMobileMenuDrawerOpen,\n  setMenuDrawerOpen,\n  setMobileMenuDrawerOpen,\n} from \"../redux/slices/interface/interfaceSlice\";\n\nimport {\n  AppBar,\n  createStyles,\n  Divider,\n  Drawer,\n  Hidden,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  makeStyles,\n  SwipeableDrawer,\n  Theme,\n  Toolbar,\n  Typography,\n  useTheme,\n} from \"@material-ui/core\";\n\nimport {\n  Home as HomeIcon,\n  PieChart as PieChartIcon,\n  InfoRounded as InfoRoundedIcon,\n  Build as BuildIcon,\n  History as HistoryIcon,\n} from \"@material-ui/icons\";\nimport { selectIsDarkMode } from \"../redux/slices/preferences/preferencesSlice\";\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    drawer: {\n      [theme.breakpoints.up(\"sm\")]: {\n        width: drawerWidth,\n        flexShrink: 0,\n      },\n    },\n\n    drawerPaper: {\n      width: drawerWidth,\n    },\n    // necessary for content to be below app bar\n    toolbar: theme.mixins.toolbar,\n  })\n);\n\nconst MenuDrawerContent = () => {\n  const isDarkMode = useAppSelector(selectIsDarkMode);\n\n  return (\n    <div>\n      <AppBar\n        position=\"relative\"\n        color={isDarkMode ? \"transparent\" : \"primary\"}\n      >\n        <Toolbar>\n          <Typography variant=\"h6\" noWrap>\n            OP25 (Boatbod)\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Divider />\n      <List>\n        <ListItem button selected>\n          <ListItemIcon>\n            <HomeIcon />\n          </ListItemIcon>\n          <ListItemText>Receiver</ListItemText>\n        </ListItem>\n        <ListItem button>\n          <ListItemIcon>\n            <HistoryIcon />\n          </ListItemIcon>\n          <ListItemText>History</ListItemText>\n        </ListItem>\n        <ListItem button>\n          <ListItemIcon>\n            <BuildIcon />\n          </ListItemIcon>\n          <ListItemText>Config</ListItemText>\n        </ListItem>\n        <ListItem button>\n          <ListItemIcon>\n            <PieChartIcon />\n          </ListItemIcon>\n          <ListItemText>Plot</ListItemText>\n        </ListItem>\n      </List>\n      <Divider />\n      <List>\n        <ListItem button>\n          <ListItemIcon>\n            <InfoRoundedIcon />\n          </ListItemIcon>\n          <ListItemText>About</ListItemText>\n        </ListItem>\n      </List>\n    </div>\n  );\n};\n\nconst container =\n  globalThis !== undefined ? () => globalThis.document.body : undefined;\n\nconst MenuDrawer = () => {\n  const dispatch = useAppDispatch();\n  const isOpen = useAppSelector(isMenuDrawerOpen);\n  const mobileOpen = useAppSelector(isMobileMenuDrawerOpen);\n  const classes = useStyles();\n  const theme = useTheme();\n\n  return (\n    <nav className={classes.drawer}>\n      <Hidden smUp implementation=\"css\">\n        <SwipeableDrawer\n          container={container}\n          variant=\"temporary\"\n          anchor={theme.direction === \"rtl\" ? \"right\" : \"left\"}\n          open={mobileOpen}\n          onOpen={() => {\n            dispatch(setMobileMenuDrawerOpen(true));\n          }}\n          onClose={() => {\n            dispatch(setMobileMenuDrawerOpen(false));\n          }}\n          classes={{\n            paper: classes.drawerPaper,\n          }}\n          ModalProps={{\n            keepMounted: true, // Better open performance on mobile.\n          }}\n        >\n          <MenuDrawerContent />\n        </SwipeableDrawer>\n      </Hidden>\n      <Hidden xsDown implementation=\"css\">\n        <Drawer\n          classes={{\n            paper: classes.drawerPaper,\n          }}\n          variant=\"persistent\"\n          anchor={theme.direction === \"rtl\" ? \"right\" : \"left\"}\n          open={isOpen}\n          onClose={() => {\n            dispatch(setMenuDrawerOpen(false));\n          }}\n          ModalProps={{\n            keepMounted: true, // Better open performance on mobile.\n          }}\n        >\n          <MenuDrawerContent />\n        </Drawer>\n      </Hidden>\n    </nav>\n  );\n};\n\nexport default MenuDrawer;\n","import { useAppDispatch, useAppSelector } from \"../redux/app/hooks\";\nimport {\n  isPreferencesOpen,\n  setPreferencesDrawerOpen,\n} from \"../redux/slices/interface/interfaceSlice\";\nimport {\n  selectIsDarkMode,\n  selectShowChannelInTitle,\n  setDarkMode,\n  setShowChannelInTitle,\n} from \"../redux/slices/preferences/preferencesSlice\";\n\nimport {\n  AppBar,\n  createStyles,\n  Divider,\n  FormControlLabel,\n  FormGroup,\n  Grid,\n  IconButton,\n  makeStyles,\n  SwipeableDrawer,\n  Switch,\n  Theme,\n  Toolbar,\n  Typography,\n  useTheme,\n} from \"@material-ui/core\";\n\nimport { Close as CloseIcon } from \"@material-ui/icons\";\n\nimport { blue } from \"@material-ui/core/colors\";\n\nconst drawerWidth = 300;\n\ninterface StylesProps {\n  isDarkMode: boolean;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    appBar: {\n      [theme.breakpoints.up(\"sm\")]: {\n        width: `${drawerWidth}px`,\n      },\n    },\n    drawer: {\n      [theme.breakpoints.up(\"sm\")]: {\n        width: drawerWidth,\n        flexShrink: 0,\n      },\n    },\n    gridSpace: {\n      paddingLeft: theme.spacing(2),\n    },\n    drawerPaper: {\n      width: drawerWidth,\n    },\n    preferencesHeader: {\n      color: (props: StylesProps) =>\n        props.isDarkMode ? theme.palette.common.white : blue[800],\n    },\n    checkboxMaxWidth: {\n      width: 180,\n    },\n    toolbar: theme.mixins.toolbar, // necessary for content to be below app bar\n  })\n);\n\nconst container =\n  globalThis !== undefined ? () => globalThis.document.body : undefined;\n\nconst PreferencesDrawer = () => {\n  const dispatch = useAppDispatch();\n  const isOpen = useAppSelector(isPreferencesOpen);\n  const isDarkMode = useAppSelector(selectIsDarkMode);\n  const isShowChannelInTitle = useAppSelector(selectShowChannelInTitle);\n  const classes = useStyles({ isDarkMode });\n  const theme = useTheme();\n\n  return (\n    <nav className={classes.drawer}>\n      <SwipeableDrawer\n        container={container}\n        variant=\"temporary\"\n        anchor={theme.direction === \"rtl\" ? \"left\" : \"right\"}\n        open={isOpen}\n        onClose={() => {\n          dispatch(setPreferencesDrawerOpen(false));\n        }}\n        onOpen={() => {\n          dispatch(setPreferencesDrawerOpen(true));\n        }}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n        ModalProps={{\n          keepMounted: true, // Better open performance on mobile.\n        }}\n      >\n        <AppBar\n          position=\"relative\"\n          className={classes.appBar}\n          color={isDarkMode ? \"transparent\" : \"primary\"}\n        >\n          <Toolbar></Toolbar>\n        </AppBar>\n        <Divider />\n        <Grid className={classes.gridSpace} container spacing={0}>\n          <Grid item xs={12}>\n            <Grid container justifyContent=\"flex-end\">\n              <IconButton\n                onClick={() => {\n                  dispatch(setPreferencesDrawerOpen(false));\n                }}\n              >\n                <CloseIcon />\n              </IconButton>\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <Typography className={classes.preferencesHeader} variant=\"h6\">\n              Theme\n            </Typography>\n          </Grid>\n          <Grid item xs={12}>\n            <FormGroup>\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={isDarkMode}\n                    onChange={(e) => {\n                      dispatch(setDarkMode(e.target.checked));\n                    }}\n                    name=\"darkModeEnabled\"\n                  />\n                }\n                label=\"Dark Mode\"\n              />\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={isShowChannelInTitle}\n                    onChange={(e) => {\n                      dispatch(setShowChannelInTitle(e.target.checked));\n                    }}\n                    name=\"showChannelInTitleEnabled\"\n                  />\n                }\n                label={`Show Channel In Browser Title`}\n                className={classes.checkboxMaxWidth}\n              />\n            </FormGroup>\n          </Grid>\n        </Grid>\n      </SwipeableDrawer>\n    </nav>\n  );\n};\n\nexport default PreferencesDrawer;\n","import { useAppDispatch, useAppSelector } from \"../redux/app/hooks\";\nimport MenuDrawer from \"./MenuDrawer\";\nimport PreferencesDrawer from \"./PreferencesDrawer\";\nimport {\n  isMenuDrawerOpen,\n  toggleMenuDrawerOpen,\n  toggleMobileMenuDrawerOpen,\n  togglePreferencesDrawerOpen,\n} from \"../redux/slices/interface/interfaceSlice\";\n\nimport {\n  AppBar,\n  createStyles,\n  Hidden,\n  IconButton,\n  makeStyles,\n  Theme,\n  Toolbar,\n  Tooltip,\n} from \"@material-ui/core\";\n\nimport { Menu as MenuIcon, Settings as SettingsIcon } from \"@material-ui/icons\";\n\ninterface useStylesProps {\n  isOpen: boolean;\n}\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    grow: {\n      flexGrow: 1,\n    },\n    appBar: {\n      [theme.breakpoints.up(\"sm\")]: {\n        width: (props: useStylesProps) => (props.isOpen ? `calc(100%)` : \"\"),\n        paddingLeft: (props: useStylesProps) => props.isOpen && drawerWidth,\n      },\n    },\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3),\n    },\n  })\n);\n\nconst AppBarWithToolbar = () => {\n  const dispatch = useAppDispatch();\n  const isOpen = useAppSelector(isMenuDrawerOpen);\n  const classes = useStyles({ isOpen });\n\n  return (\n    <AppBar position=\"fixed\" className={classes.appBar}>\n      <MenuDrawer />\n      <Toolbar>\n        <Hidden smUp>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            onClick={() => {\n              dispatch(toggleMobileMenuDrawerOpen());\n            }}\n          >\n            <MenuIcon />\n          </IconButton>\n        </Hidden>\n        <Hidden xsDown>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            onClick={() => {\n              dispatch(toggleMenuDrawerOpen());\n            }}\n          >\n            <MenuIcon />\n          </IconButton>\n        </Hidden>\n        <div className={classes.grow} />\n        <Tooltip title=\"Preferences\" aria-label=\"preferences\">\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"preferences\"\n            onClick={() => {\n              dispatch(togglePreferencesDrawerOpen());\n            }}\n          >\n            <SettingsIcon />\n          </IconButton>\n        </Tooltip>\n      </Toolbar>\n      <PreferencesDrawer />\n    </AppBar>\n  );\n};\n\nexport default AppBarWithToolbar;\n","import AppBarWithToolbar from \"./AppBarWithToolbar\";\n\nimport { createStyles, makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    root: {\n      display: \"flex\",\n    },\n  })\n);\n\nconst TopMenuBarAndDrawers = () => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBarWithToolbar />\n    </div>\n  );\n};\n\nexport default TopMenuBarAndDrawers;\n","import axios from \"axios\";\n\nconst Axios = () => {\n  return axios.create({\n    baseURL: process.env.REACT_APP_DEV_SERVER_API\n      ? process.env.REACT_APP_DEV_SERVER_API\n      : \"/\",\n    method: \"post\",\n    headers: { \"Content-type\": \"application/json\" },\n    timeout: 5000,\n    withCredentials: false,\n  });\n};\n\nexport default Axios;\n","// function term_config(d: any) {\n// TODO: Remove ANY Type\n//   var lg_step = 1200;\n//   var sm_step = 100;\n//   var updated = 0;\n//   if (\n//     d[\"tuning_step_large\"] != undefined &&\n//     d[\"tuning_step_large\"] != lg_step\n//   ) {\n//     lg_step = d[\"tuning_step_large\"];\n//     updated++;\n//   }\n//   if (\n//     d[\"tuning_step_small\"] != undefined &&\n//     d[\"tuning_step_small\"] != sm_step\n//   ) {\n//     sm_step = d[\"tuning_step_small\"];\n//     updated++;\n//   }\n//   if (updated) {\n//     set_tuning_step_sizes(lg_step, sm_step);\n//   }\n// }\n// function set_tuning_step_sizes(lg_step = 1200, sm_step = 100) {\n//   var title_str = \"Adjust tune \";\n//   var bn_t1_U = document.getElementById(\"t1_U\");\n//   var bn_t2_U = document.getElementById(\"t2_U\");\n//   var bn_t1_D = document.getElementById(\"t1_D\");\n//   var bn_t2_D = document.getElementById(\"t2_D\");\n//   var bn_t1_u = document.getElementById(\"t1_u\");\n//   var bn_t2_u = document.getElementById(\"t2_u\");\n//   var bn_t1_d = document.getElementById(\"t1_d\");\n//   var bn_t2_d = document.getElementById(\"t2_d\");\n//   if (bn_t1_U != null && bn_t2_U != null) {\n//     bn_t1_U.setAttribute(\"title\", title_str + \"+\" + lg_step);\n//     bn_t2_U.setAttribute(\"title\", title_str + \"+\" + lg_step);\n//     bn_t1_U.setAttribute(\n//       \"onclick\",\n//       \"javascript:f_tune_button(\" + lg_step + \");\"\n//     );\n//     bn_t2_U.setAttribute(\n//       \"onclick\",\n//       \"javascript:f_tune_button(\" + lg_step + \");\"\n//     );\n//   }\n//   if (bn_t1_D != null && bn_t2_D != null) {\n//     bn_t1_D.setAttribute(\"title\", title_str + \"-\" + lg_step);\n//     bn_t2_D.setAttribute(\"title\", title_str + \"-\" + lg_step);\n//     bn_t1_D.setAttribute(\n//       \"onclick\",\n//       \"javascript:f_tune_button(-\" + lg_step + \");\"\n//     );\n//     bn_t2_D.setAttribute(\n//       \"onclick\",\n//       \"javascript:f_tune_button(-\" + lg_step + \");\"\n//     );\n//   }\n//   if (bn_t1_u != null && bn_t2_u != null) {\n//     bn_t1_u.setAttribute(\"title\", title_str + \"+\" + sm_step);\n//     bn_t2_u.setAttribute(\"title\", title_str + \"+\" + sm_step);\n//     bn_t1_u.setAttribute(\n//       \"onclick\",\n//       \"javascript:f_tune_button(\" + sm_step + \");\"\n//     );\n//     bn_t2_u.setAttribute(\n//       \"onclick\",\n//       \"javascript:f_tune_button(\" + sm_step + \");\"\n//     );\n//   }\n//   if (bn_t1_d != null && bn_t2_d != null) {\n//     bn_t1_d.setAttribute(\"title\", title_str + \"-\" + sm_step);\n//     bn_t2_d.setAttribute(\"title\", title_str + \"-\" + sm_step);\n//     bn_t1_d.setAttribute(\n//       \"onclick\",\n//       \"javascript:f_tune_button(-\" + sm_step + \");\"\n//     );\n//     bn_t2_d.setAttribute(\n//       \"onclick\",\n//       \"javascript:f_tune_button(-\" + sm_step + \");\"\n//     );\n//   }\n// }\n\n// function rx_update(d) {\n//   plotfiles = [];\n//   if ((d[\"files\"] != undefined) && (d[\"files\"].length > 0)) {\n//       for (var i=0; i < d[\"files\"].length; i++) {\n//           if (channel_list.length > 0) {\n//               expr = new RegExp(\"plot\\-\" + channel_list[channel_index] + \"\\-\");\n//           }\n//           else {\n//               expr = new RegExp(\"plot\\-0\\-\");\n//           }\n\n//           if (expr.test(d[\"files\"][i])) {\n//               plotfiles.push(d[\"files\"][i]);\n//           }\n//       }\n\n//       for (var i=0; i < 5; i++) {\n//           var img = document.getElementById(\"img\" + i);\n//           if (i < plotfiles.length) {\n//               if (img['src'] != plotfiles[i]) {\n//                   img['src'] = plotfiles[i];\n//                   img.style[\"display\"] = \"\";\n//               }\n//           }\n//           else {\n//               img.style[\"display\"] = \"none\";\n//           }\n//       }\n//   }\n//   else {\n//       var img = document.getElementById(\"img0\");\n//       img.style[\"display\"] = \"none\";\n//   }\n//   if (d[\"error\"] != undefined)\n//       error_val = d[\"error\"];\n//   if (d[\"fine_tune\"] != undefined)\n//       fine_tune = d[\"fine_tune\"];\n// }\n\nimport { Draft } from \"@reduxjs/toolkit\";\nimport { StoreType } from \"redux/app/store\";\nimport { addToSendQueue } from \"redux/slices/op25/op25Slice\";\nimport { Channels } from \"types/Channel\";\nimport {\n  OP25ChannelUpdateChannelData,\n  OP25TypeChannelUpdate,\n  OP25TypeTerminalConfig,\n} from \"types/OP25\";\nimport { OP25State } from \"types/OP25State\";\nimport { TerminalConfig } from \"types/TerminalConfig\";\n\nexport const frequencyToString = (frequency: number) => {\n  return (frequency / 1000000.0).toFixed(6);\n};\n\nexport const ppmToString = (ppm: number) => {\n  return ppm.toFixed(3);\n};\n\nexport const channel_update = (\n  data: OP25TypeChannelUpdate,\n  state: Draft<OP25State>\n) => {\n  if (data.json_type === \"channel_update\" && data.channels) {\n    let channels: Channels = [];\n\n    for (const channel in data.channels) {\n      const channelData = data[channel] as OP25ChannelUpdateChannelData;\n      channels.push({\n        id: Number.parseInt(channel),\n        encrypted: channelData.encrypted === 1,\n        frequency: channelData.freq,\n        mode: channelData.mode,\n        name: channelData.name,\n        sourceAddress: channelData.srcaddr,\n        sourceTag: channelData.srctag,\n        stream: channelData.stream,\n        msgqid: channelData.msgqid,\n        ppm: channelData.ppm,\n        systemName: channelData.system,\n        tdma: channelData.tdma,\n        tgID: channelData.tgid,\n        tgTag: channelData.tag,\n      });\n    }\n\n    state.channels = channels;\n  }\n};\n\nexport const terminal_config = (\n  data: OP25TypeTerminalConfig,\n  state: Draft<OP25State>\n) => {\n  if (data.json_type === \"terminal_config\") {\n    const config: TerminalConfig = {\n      module: data.module,\n      terminalType: data.terminal_type,\n      cursesPlotInterval: data.curses_plot_interval,\n      httpPlotInterval: data.http_plot_interval,\n      httpPlotDirectory: data.http_plot_directory,\n      tuningStepSizeLarge: data.tuning_step_large,\n      tuningStepSizeSmall: data.tuning_step_small,\n    };\n\n    state.terminalConfig = config;\n  }\n};\n\nexport class OP25 {\n  private static instance: OP25;\n\n  private _store: StoreType | null;\n\n  static getInstance() {\n    if (!OP25.instance) {\n      OP25.instance = new OP25();\n    }\n\n    return OP25.instance;\n  }\n\n  constructor() {\n    this._store = null;\n  }\n\n  setStore(store: StoreType): void {\n    this._store = store;\n  }\n\n  async sendGetSimpleConfig(): Promise<void> {\n    if (!this._store) {\n      return;\n    }\n\n    await this._store.dispatch(\n      addToSendQueue({ command: \"get_config\", arg1: 0, arg2: 0 })\n    );\n  }\n\n  async sendGetFullConfig(): Promise<void> {\n    if (!this._store) {\n      return;\n    }\n\n    await this._store.dispatch(\n      addToSendQueue({ command: \"get_full_config\", arg1: 0, arg2: 0 })\n    );\n  }\n\n  async sendUpdateChannels(): Promise<void> {\n    if (!this._store) {\n      return;\n    }\n    const state = this._store.getState();\n\n    const { channels } = state.op25;\n\n    if (channels.length === 0) {\n      await this._store?.dispatch(\n        addToSendQueue({ command: \"update\", arg1: 0, arg2: 0 })\n      );\n    } else {\n      channels.forEach(async (channel) => {\n        await this._store?.dispatch(\n          addToSendQueue({\n            command: \"update\",\n            arg1: 0,\n            arg2: channel.id,\n          })\n        );\n      });\n    }\n  }\n\n  async sendHoldOnChannel(\n    channelId: number,\n    talkgroupId: number\n  ): Promise<void> {\n    await this._store?.dispatch(\n      addToSendQueue({ command: \"hold\", arg1: talkgroupId, arg2: channelId })\n    );\n  }\n\n  async sendUnHoldOnChannel(channelId: number): Promise<void> {\n    await this._store?.dispatch(\n      addToSendQueue({ command: \"hold\", arg1: 0, arg2: channelId })\n    );\n  }\n\n  async sendSkipOnChannel(channelId: number): Promise<void> {\n    await this._store?.dispatch(\n      addToSendQueue({ command: \"skip\", arg1: 0, arg2: channelId })\n    );\n  }\n\n  async sendBlacklistOnChannel(\n    channelId: number,\n    talkgroupId: number\n  ): Promise<void> {\n    await this._store?.dispatch(\n      addToSendQueue({ command: \"lockout\", arg1: talkgroupId, arg2: channelId })\n    );\n  }\n\n  async sendWhitelistOnChannel(\n    channelId: number,\n    talkgroupId: number\n  ): Promise<void> {\n    await this._store?.dispatch(\n      addToSendQueue({\n        command: \"whitelist\",\n        arg1: talkgroupId,\n        arg2: channelId,\n      })\n    );\n  }\n\n  async sendReloadOnChannel(channelId: number): Promise<void> {\n    await this._store?.dispatch(\n      addToSendQueue({ command: \"reload\", arg1: 0, arg2: channelId })\n    );\n  }\n\n  async sendSetDebugOnChannel(\n    channelId: number,\n    debugLevel: number\n  ): Promise<void> {\n    await this._store?.dispatch(\n      addToSendQueue({\n        command: \"set_debug\",\n        arg1: debugLevel,\n        arg2: channelId,\n      })\n    );\n  }\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"redux/app/store\";\nimport {\n  OP25SendQueueItem,\n  OP25TypeChannelUpdate,\n  OP25TypeTerminalConfig,\n  OP25Updates,\n} from \"types/OP25\";\nimport { OP25State } from \"types/OP25State\";\nimport axios from \"utils/axios\";\nimport { channel_update, terminal_config } from \"lib/op25\";\nimport { Channel, Channels } from \"types/Channel\";\n\nconst SEND_QLIMIT = 5;\n\nconst initialState: OP25State = {\n  channels: [],\n  terminalConfig: undefined,\n  send_queue: [{ command: \"get_config\", arg1: 0, arg2: 0 }],\n};\n\nexport const sendQueue = createAsyncThunk(\n  \"op25/sendQueue\",\n  async (_, { getState, dispatch }) => {\n    const state = (getState() as any).op25 as OP25State;\n\n    try {\n      const queue: OP25SendQueueItem[] = [...state.send_queue];\n      dispatch(emptySendQueue());\n\n      const response = await axios().post(\"/\", queue);\n      if (response.status !== 200) {\n        // TODO: Show the user SOMETHING!\n        console.log(\n          `Error ${response.status.toString(10)}: ${response.statusText}`\n        );\n        return;\n      }\n      return response.data;\n    } catch (err) {\n      // TODO: Show the user SOMETHING!\n      console.log(\"Axios request error:\", err);\n    }\n  }\n);\n\nexport const addToSendQueue = createAsyncThunk(\n  \"op25/addToSendQueue\",\n  async (send_command: OP25SendQueueItem, { getState, dispatch }) => {\n    const state = (getState() as any).op25 as OP25State;\n\n    if (state.send_queue.length >= SEND_QLIMIT) {\n      dispatch(unshiftOnSendQueue());\n    }\n\n    dispatch(pushToSendQueue(send_command));\n  }\n);\n\nexport const op25Slice = createSlice({\n  name: \"op25\",\n  initialState,\n  reducers: {\n    pushToSendQueue: (state, action: PayloadAction<OP25SendQueueItem>) => {\n      state.send_queue.push(action.payload);\n    },\n    unshiftOnSendQueue: (state) => {\n      state.send_queue.unshift();\n    },\n    emptySendQueue: (state) => {\n      state.send_queue = [];\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(sendQueue.fulfilled, (state, action: any) => {\n        if (action.payload) {\n          const data: OP25Updates = action.payload;\n          try {\n            data.forEach((update) => {\n              if (!update.json_type) {\n                console.log(\"no json_type\", update);\n                return;\n              }\n\n              switch (update.json_type) {\n                case \"trunk_update\":\n                  //console.log(\"trunk_update\", update);\n                  // trunk_update(update);\n                  return;\n                case \"change_freq\":\n                  //console.log(\"***** change_freq *****\", update);\n                  // change_freq(update);\n                  return;\n                case \"channel_update\":\n                  channel_update(update as OP25TypeChannelUpdate, state);\n                  return;\n                case \"rx_update\":\n                  // console.log(\"***** rx_update *****\", update); // Plot Updates\n                  // rx_update(update);\n                  return;\n                case \"terminal_config\":\n                  terminal_config(update as OP25TypeTerminalConfig, state);\n                  return;\n                case \"full_config\":\n                  console.log(\"full_config\", update);\n                  return;\n                default:\n                  console.log(\"unknown server data type\", update.json_type);\n                  return;\n              }\n            });\n          } catch (err) {\n            // TODO: Show the user SOMETHING!\n            console.log(\"Error parsing response: \", err);\n          }\n        }\n      })\n      .addCase(addToSendQueue.fulfilled, (_, action) => {});\n  },\n});\n\nexport const { pushToSendQueue, unshiftOnSendQueue, emptySendQueue } =\n  op25Slice.actions;\n\nexport const selectChannels = (state: RootState): Channels =>\n  state.op25.channels;\n\nexport const selectChannel =\n  (channelId: number) =>\n  (state: RootState): Channel | undefined =>\n    state.op25.channels.find((channel) => channel.id === channelId);\n\nexport const selectStepSizes = (\n  state: RootState\n): { stepSizeSmall: number; stepSizeLarge: number } => ({\n  stepSizeSmall: state.op25.terminalConfig?.tuningStepSizeSmall || 100,\n  stepSizeLarge: state.op25.terminalConfig?.tuningStepSizeLarge || 1200,\n});\n\nexport default op25Slice.reducer;\n","import { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport { useAppSelector } from \"redux/app/hooks\";\nimport { selectChannel, selectStepSizes } from \"redux/slices/op25/op25Slice\";\nimport { frequencyToString, OP25 } from \"lib/op25\";\nimport { DataGrid, GridColDef, GridRenderCellParams } from \"@mui/x-data-grid\";\n\nimport {\n  Card,\n  CardActions,\n  CardContent,\n  Button,\n  Theme,\n  Typography,\n  IconButton,\n  Tooltip,\n  Grid,\n  CardHeader,\n} from \"@material-ui/core\";\n\nimport {\n  FiChevronsLeft as DoubleArrowsLeftIcon,\n  FiChevronLeft as ArrowLeftIcon,\n  FiChevronsRight as DoubleArrowsRightIcon,\n  FiChevronRight as ArrowRightIcon,\n} from \"react-icons/fi\";\nimport { selectIsDarkMode } from \"redux/slices/preferences/preferencesSlice\";\n\ntype ChannelDisplayProps = {\n  className?: string | undefined;\n  channelId: number;\n};\n\ntype useStylesProps = {\n  isEncrypted: boolean;\n  isDarkMode: boolean;\n};\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      minWidth: 275,\n      border: \"0\",\n    },\n    cardContent: {\n      paddingRight: 15,\n      borderLeftStyle: (props: useStylesProps) =>\n        props.isDarkMode ? \"none\" : \"solid\",\n      borderRightStyle: (props: useStylesProps) =>\n        props.isDarkMode ? \"none\" : \"solid\",\n      borderWidth: 1,\n    },\n    cardHeader: {\n      backgroundColor: (props: useStylesProps) =>\n        props.isEncrypted ? \"red\" : theme.palette.primary.main,\n      borderLeftStyle: (props: useStylesProps) =>\n        props.isDarkMode ? \"none\" : \"solid\",\n      borderRightStyle: (props: useStylesProps) =>\n        props.isDarkMode ? \"none\" : \"solid\",\n      borderTopStyle: (props: useStylesProps) =>\n        props.isDarkMode ? \"none\" : \"solid\",\n      borderWidth: 1,\n      borderColor: (props: useStylesProps) =>\n        props.isEncrypted ? \"red\" : theme.palette.primary.main,\n      margin: \"0\",\n      textAlign: \"center\",\n      height: 30,\n      color: theme.palette.primary.contrastText,\n    },\n    currentchannel: {\n      marginLeft: 15,\n      marginBottom: 20,\n      overflow: \"auto\",\n    },\n    grid: {\n      height: 210,\n    },\n    gridRoot: {\n      fontSize: 12,\n      border: \"0\",\n    },\n    rowRoot: {\n      border: \"0\",\n    },\n    cellRoot: {\n      paddingLeft: 5,\n      paddingRight: 5,\n      border: \"0\",\n    },\n    cardActions: {\n      paddingBottom: 20,\n      borderLeftStyle: (props: useStylesProps) =>\n        props.isDarkMode ? \"none\" : \"solid\",\n      borderRightStyle: (props: useStylesProps) =>\n        props.isDarkMode ? \"none\" : \"solid\",\n      borderBottomStyle: (props: useStylesProps) =>\n        props.isDarkMode ? \"none\" : \"solid\",\n      borderWidth: 1,\n      flexWrap: \"wrap\",\n      justifyContent: \"center\",\n    },\n    actionbuttons: {\n      paddingLeft: 15,\n      paddingRight: 15,\n    },\n  })\n);\n\nconst ChannelDisplay = ({ className, channelId }: ChannelDisplayProps) => {\n  const op25 = OP25.getInstance();\n  const channel = useAppSelector(selectChannel(channelId));\n  const isDarkMode = useAppSelector(selectIsDarkMode);\n  const classes = useStyles({\n    isEncrypted: channel ? channel.encrypted : false,\n    isDarkMode,\n  });\n  const { stepSizeSmall, stepSizeLarge } = useAppSelector(selectStepSizes);\n\n  const columns: GridColDef[] = [\n    { field: \"id\", hide: true, sortable: false },\n    {\n      field: \"stateName\",\n      align: \"right\",\n      sortable: false,\n      minWidth: 110,\n      renderHeader: (_) => <></>,\n      renderCell: (params: GridRenderCellParams) =>\n        params.getValue(params.id, \"description\") ? (\n          <Tooltip\n            title={`${\n              params.getValue(params.id, \"description\") &&\n              params.getValue(params.id, \"description\")?.toString()\n            }`}\n            enterDelay={500}\n            placement=\"right\"\n          >\n            <span>{params.getValue(params.id, \"stateName\")}</span>\n          </Tooltip>\n        ) : (\n          <span>{params.getValue(params.id, \"stateName\")}</span>\n        ),\n    },\n    {\n      field: \"stateValue\",\n      align: \"left\",\n      sortable: false,\n      renderHeader: (_) => <></>,\n    },\n    { field: \"description\", hide: true, sortable: false },\n  ];\n\n  const rows = [\n    {\n      id: 1,\n      stateName: \"Group Address:\",\n      stateValue: channel && channel.tgID ? channel.tgID : \"-\",\n      description:\n        \"Also known as the Talkgroup ID, this is the unique ID assigned to a group.\",\n    },\n    {\n      id: 2,\n      stateName: \"Source Address:\",\n      stateValue:\n        channel && channel.sourceAddress ? channel.sourceAddress : \"-\",\n      description: \"ID of the person talking (Radio ID / Unit ID)\",\n    },\n    {\n      id: 3,\n      stateName: \"Frequency:\",\n      stateValue:\n        channel && channel.frequency\n          ? frequencyToString(channel.frequency)\n          : \"-\",\n    },\n    {\n      id: 4,\n      stateName: \"Encrypted:\",\n      stateValue: channel ? (channel.encrypted ? \"Yes\" : \"No\") : \"-\",\n      description:\n        \"Shows as yes if this channel is encrpyted (false positives do occur)\",\n    },\n  ];\n\n  const getCardHeaderText = (): string => {\n    if (channel) {\n      if (channel.name && channel.systemName) {\n        return `${channel.name} / ${channel.systemName}`;\n      } else if (channel.name) {\n        return channel.name;\n      } else if (channel.systemName) {\n        return channel.systemName;\n      } else {\n        return \"-\";\n      }\n    } else {\n      return \"-\";\n    }\n  };\n\n  // TODO: Create better prompt.\n  const onGoToTalkgroup = async () => {\n    if (channel) {\n      const talkgroupId = prompt(\"Hold on what talkgroup ID?\");\n      if (talkgroupId) {\n        await op25.sendHoldOnChannel(channel.id, Number.parseInt(talkgroupId));\n      }\n    }\n  };\n\n  const onHoldTalkgroup = async () => {\n    if (channel && channel.tgID) {\n      await op25.sendHoldOnChannel(channel.id, channel.tgID);\n    }\n  };\n\n  const onReloadChannel = async () => {\n    if (channel) {\n      await op25.sendReloadOnChannel(channel.id);\n    }\n  };\n\n  // TODO: Create better prompt.\n  const onBlacklistTalkgroup = async () => {\n    if (channel) {\n      const talkgroupId = prompt(\n        \"Blacklist what talkgroup ID?\",\n        channel.tgID?.toString()\n      );\n      if (talkgroupId) {\n        await op25.sendBlacklistOnChannel(\n          channel.id,\n          Number.parseInt(talkgroupId)\n        );\n      }\n    }\n  };\n\n  // TODO: Create better prompt.\n  const onWhitelistTalkgroup = async () => {\n    if (channel) {\n      const talkgroupId = prompt(\n        \"Whitelist what talkgroup ID?\",\n        channel.tgID?.toString()\n      );\n      if (talkgroupId) {\n        await op25.sendWhitelistOnChannel(\n          channel.id,\n          Number.parseInt(talkgroupId)\n        );\n      }\n    }\n  };\n\n  // TODO: Create better prompt.\n  const onLogVerboseChange = async () => {\n    if (channel) {\n      const verboseLevel = prompt(\"What log verbose level?\");\n      if (verboseLevel) {\n        await op25.sendSetDebugOnChannel(\n          channel.id,\n          Number.parseInt(verboseLevel)\n        );\n      }\n    }\n  };\n\n  const onSkipTalkgroup = async () => {\n    if (channel) {\n      await op25.sendSkipOnChannel(channel.id);\n    }\n  };\n\n  return (\n    <Card\n      className={`${classes.root}${\n        className !== undefined ? ` ${className}` : \"\"\n      }`}\n      variant=\"outlined\"\n    >\n      <CardHeader\n        title={getCardHeaderText()}\n        className={classes.cardHeader}\n        titleTypographyProps={{ variant: \"subtitle2\" }}\n      />\n      <CardContent className={classes.cardContent}>\n        <Typography\n          className={classes.currentchannel}\n          variant=\"h5\"\n          component=\"h2\"\n        >\n          {channel && (channel.tgTag || channel.tgID)\n            ? channel.tgTag\n              ? channel.tgTag\n              : channel.tgID\n            : \"-\"}\n        </Typography>\n        <div className={classes.grid}>\n          <DataGrid\n            classes={{\n              root: classes.gridRoot,\n              row: classes.rowRoot,\n              cell: classes.cellRoot,\n            }}\n            rows={rows}\n            columns={columns}\n            headerHeight={0}\n            isRowSelectable={(_) => false}\n            hideFooter\n          />\n        </div>\n      </CardContent>\n      <CardActions className={classes.cardActions}>\n        <Grid container direction=\"column\" spacing={2}>\n          <Grid item>\n            <Grid container direction=\"row\" justifyContent=\"center\">\n              <Button size=\"small\" onClick={onSkipTalkgroup}>\n                Skip\n              </Button>\n              <Button size=\"small\" onClick={onHoldTalkgroup}>\n                Hold\n              </Button>\n              <Button size=\"small\" onClick={onReloadChannel}>\n                Reload\n              </Button>\n              <Button size=\"small\" onClick={onGoToTalkgroup}>\n                GOTO\n              </Button>\n              <Tooltip\n                title=\"Blacklist\"\n                placement=\"top\"\n                enterDelay={500}\n                onClick={onBlacklistTalkgroup}\n              >\n                <Button size=\"small\">B/List</Button>\n              </Tooltip>\n              <Tooltip\n                title=\"Whitelist\"\n                placement=\"top\"\n                enterDelay={500}\n                onClick={onWhitelistTalkgroup}\n              >\n                <Button size=\"small\">W/List</Button>\n              </Tooltip>\n              <Tooltip\n                title=\"Log Verbosity\"\n                placement=\"top\"\n                enterDelay={500}\n                onClick={onLogVerboseChange}\n              >\n                <Button size=\"small\">Log/V</Button>\n              </Tooltip>\n            </Grid>\n          </Grid>\n          <Grid item>\n            <Grid container direction=\"row\" justifyContent=\"center\">\n              <Tooltip title={`-${stepSizeLarge}`} placement=\"top\">\n                <IconButton size=\"small\" className={classes.actionbuttons}>\n                  <DoubleArrowsLeftIcon />\n                </IconButton>\n              </Tooltip>\n              <Tooltip title={`-${stepSizeSmall}`} placement=\"top\">\n                <IconButton size=\"small\" className={classes.actionbuttons}>\n                  <ArrowLeftIcon />\n                </IconButton>\n              </Tooltip>\n              <Tooltip title={`+${stepSizeSmall}`} placement=\"top\">\n                <IconButton size=\"small\" className={classes.actionbuttons}>\n                  <ArrowRightIcon />\n                </IconButton>\n              </Tooltip>\n              <Tooltip title={`+${stepSizeLarge}`} placement=\"top\">\n                <IconButton size=\"small\" className={classes.actionbuttons}>\n                  <DoubleArrowsRightIcon />\n                </IconButton>\n              </Tooltip>\n              <Button size=\"small\" onClick={onGoToTalkgroup}>\n                View Plot\n              </Button>\n            </Grid>\n          </Grid>\n        </Grid>\n      </CardActions>\n    </Card>\n  );\n};\n\nexport default ChannelDisplay;\n","import ChannelDisplay from \"components/ChannelDisplay\";\nimport { useAppSelector } from \"redux/app/hooks\";\nimport { selectChannels } from \"redux/slices/op25/op25Slice\";\n\nimport {\n  createStyles,\n  Grid,\n  makeStyles,\n  Theme,\n  Typography,\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    headingText: {\n      color: theme.palette.getContrastText(theme.palette.background.default),\n      fontSize: \"2em\",\n      marginBottom: 15,\n    },\n  })\n);\n\nconst MainUi = () => {\n  const classes = useStyles();\n  const channels = useAppSelector(selectChannels);\n\n  return (\n    <>\n      <Typography component=\"h1\" className={classes.headingText}>\n        Channels:\n      </Typography>\n      <Grid container spacing={2}>\n        {channels.map((channel) => (\n          <Grid item key={channel.id} xs={12} md={6}>\n            <ChannelDisplay channelId={channel.id} />\n          </Grid>\n        ))}\n      </Grid>\n    </>\n  );\n};\n\nexport default MainUi;\n","import { useEffect } from \"react\";\nimport TopMenuBarAndDrawers from \"./components/TopMenuBarAndDrawers\";\nimport { useAppDispatch, useAppSelector } from \"redux/app/hooks\";\nimport { isMenuDrawerOpen } from \"redux/slices/interface/interfaceSlice\";\nimport ReceiverUi from \"pages/ReceiverUi\";\nimport { sendQueue } from \"redux/slices/op25/op25Slice\";\n\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core\";\nimport { OP25 } from \"lib/op25\";\n\ninterface useStylesProps {\n  isOpen: boolean;\n}\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    content: {\n      width: \"100%\",\n      [theme.breakpoints.down(\"xs\")]: {\n        paddingTop: 90,\n        paddingBottom: 20,\n        paddingLeft: 20,\n        paddingRight: 20,\n      },\n      [theme.breakpoints.up(\"sm\")]: {\n        paddingLeft: (props: useStylesProps) =>\n          props.isOpen && drawerWidth + 25,\n        paddingTop: 90,\n        paddingBottom: 25,\n        paddingRight: 25,\n      },\n    },\n    tempDebugContent: {\n      marginTop: 50,\n    },\n  })\n);\n\nconst App = () => {\n  const op25 = OP25.getInstance();\n  const dispatch = useAppDispatch();\n  const isOpen = useAppSelector(isMenuDrawerOpen);\n  const classes = useStyles({ isOpen });\n\n  useEffect(() => {\n    const updateTimer = setInterval(async () => {\n      op25.sendUpdateChannels();\n    }, 1000);\n\n    const sendQueueTimer = setInterval(async () => {\n      await dispatch(sendQueue());\n    }, 1000);\n\n    return () => {\n      clearInterval(updateTimer);\n      clearInterval(sendQueueTimer);\n    };\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      <TopMenuBarAndDrawers />\n      <div className={classes.content}>\n        <ReceiverUi />\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\nimport interfaceReducer from \"../slices/interface/interfaceSlice\";\nimport op25Reducer from \"../slices/op25/op25Slice\";\nimport preferencesReducer from \"../slices/preferences/preferencesSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    interface: interfaceReducer,\n    op25: op25Reducer,\n    preferences: preferencesReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n\nexport type StoreType = typeof store;\n","import { createTheme, ThemeProvider } from \"@material-ui/core\";\nimport { useAppSelector } from \"./redux/app/hooks\";\nimport { selectIsDarkMode } from \"./redux/slices/preferences/preferencesSlice\";\n\nimport { blue } from \"@material-ui/core/colors\";\n\ninterface ThemeFuncProps {\n  useDarkMode?: boolean;\n}\n\ninterface ThemeComponentProps {\n  children: any;\n}\n\nconst theme = ({ useDarkMode }: ThemeFuncProps = {}) =>\n  createTheme({\n    palette: {\n      type: useDarkMode === false ? \"light\" : \"dark\",\n      secondary: {\n        main: blue[500],\n      },\n    },\n  });\n\nconst Theme = ({ children }: ThemeComponentProps) => {\n  const darkmode = useAppSelector(selectIsDarkMode);\n  return (\n    <ThemeProvider theme={theme({ useDarkMode: darkmode })}>\n      {children}\n    </ThemeProvider>\n  );\n};\n\nexport default Theme;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { store } from \"./redux/app/store\";\nimport { Provider } from \"react-redux\";\nimport { CssBaseline } from \"@material-ui/core\";\nimport \"@fontsource/roboto\";\nimport Theme from \"./Theme\";\nimport { OP25 } from \"lib/op25\";\n\nconst appStore = store;\n\nOP25.getInstance().setStore(appStore);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={appStore}>\n      <Theme>\n        <CssBaseline />\n        <App />\n      </Theme>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}