{"version":3,"sources":["redux/app/hooks.ts","redux/slices/preferences/preferencesSlice.ts","redux/slices/interface/interfaceSlice.ts","components/MenuDrawer.tsx","components/PreferencesDrawer.tsx","components/AppBarWithToolbar.tsx","components/TopMenuBarAndDrawers.tsx","utils/axios.ts","lib/op25/index.ts","redux/slices/op25/op25Slice.ts","components/ChannelDisplay.tsx","components/SystemDisplay.tsx","pages/ReceiverUi.tsx","components/GlobalAlerts.tsx","components/ScrollToTop.tsx","App.tsx","redux/app/store.ts","Theme.tsx","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","preferencesSlice","createSlice","name","initialState","darkmode","reducers","toogleDarkMode","state","setDarkMode","action","payload","actions","selectIsDarkMode","preferences","interfaceSlice","isMenuDrawerOpen","isMobileMenuDrawerOpen","isPreferencesDrawerOpen","toggleMenuDrawerOpen","setMenuDrawerOpen","toggleMobileMenuDrawerOpen","setMobileMenuDrawerOpen","togglePreferencesDrawerOpen","setPreferencesDrawerOpen","interface","isPreferencesOpen","useStyles","makeStyles","theme","createStyles","drawer","breakpoints","up","width","flexShrink","drawerPaper","toolbar","mixins","MenuDrawerContent","isDarkMode","AppBar","position","color","Toolbar","Typography","variant","noWrap","Divider","List","ListItem","button","component","NavLink","to","activeClassName","exact","ListItemIcon","Home","ListItemText","History","Build","PieChart","InfoRounded","container","undefined","globalThis","document","body","MenuDrawer","dispatch","isOpen","mobileOpen","classes","useTheme","className","Hidden","smUp","implementation","SwipeableDrawer","anchor","direction","open","onOpen","onClose","paper","ModalProps","keepMounted","xsDown","Drawer","appBar","gridSpace","paddingLeft","spacing","preferencesHeader","props","palette","common","white","blue","checkboxMaxWidth","PreferencesDrawer","Grid","item","xs","justifyContent","IconButton","onClick","Close","FormGroup","FormControlLabel","control","Switch","checked","onChange","e","target","label","grow","flexGrow","content","padding","AppBarWithToolbar","edge","Menu","Tooltip","title","Settings","root","display","TopMenuBarAndDrawers","AXIOS_BASE_URL","process","REACT_APP_DEV_SERVER_API","Axios","axios","create","baseURL","method","headers","timeout","withCredentials","frequencyToString","frequency","toFixed","OP25","_store","this","store","a","addToSendQueue","command","arg1","arg2","getState","channels","op25","length","forEach","channel","id","channelId","talkgroupId","debugLevel","instance","isConnected","systems","terminalConfig","send_queue","sendQueue","createAsyncThunk","_","queue","emptySendQueue","post","response","status","statusText","data","send_command","unshiftOnSendQueue","pushToSendQueue","op25Slice","push","unshift","extraReducers","builder","addCase","fulfilled","dataUpdates","update","json_type","Object","keys","filter","systemData","frequencies","adjacentdata","freq","freqDisplayData","freqData","frequency_data","Number","parseInt","counter","lastActivitySeconds","last_activity","talkgroups","tgids","map","talkgroup","displayText","adjacent_data","adjItem","adjItemData","rfid","stid","uplink","table","newData","syid","rxFrequency","rxchan","txFrequency","txchan","wacn","nac","secondaryFrequencies","secondary","system","TopLine","top_line","lastTSBK","last_tsbk","adjacentData","currentItemIndex","findIndex","sys","trunk_update","console","log","channelData","encrypted","mode","sourceAddress","srcaddr","sourceTag","srctag","stream","msgqid","ppm","systemName","tdma","tgID","tgid","tgTag","tag","ch","channel_update","config","module","terminalType","terminal_type","cursesPlotInterval","curses_plot_interval","httpPlotInterval","http_plot_interval","httpPlotDirectory","http_plot_directory","tuningStepSizeLarge","tuning_step_large","tuningStepSizeSmall","tuning_step_small","terminal_config","err","toString","rejected","scroll","top","left","behavior","selectChannels","selectSystems","getSystemsCount","selectStepSizes","stepSizeSmall","stepSizeLarge","minWidth","border","cardContent","paddingRight","borderLeftStyle","borderRightStyle","borderWidth","cardHeader","backgroundColor","isEncrypted","primary","main","borderTopStyle","borderColor","margin","textAlign","height","contrastText","cardHeaderActions","marginTop","currentchannel","marginLeft","marginBottom","overflow","grid","gridRoot","fontSize","rowRoot","cellRoot","cardActions","paddingBottom","borderBottomStyle","flexWrap","actionbuttons","ChannelDisplay","onChannelHoldTalkgroup","onGoToTalkgroup","onReloadChannel","onBlacklistTalkgroup","onWhitelistTalkgroup","onLogVerboseChange","onSkipTalkgroup","find","selectChannel","useState","minimized","setMinimized","columns","field","hide","sortable","align","renderHeader","renderCell","params","getValue","enterDelay","placement","rows","stateName","stateValue","description","nextFunction","Card","CardHeader","titleTypographyProps","CardContent","row","cell","headerHeight","isRowSelectable","hideFooter","CardActions","Button","size","currentsystem","borderSpacing","borderTopWidth","borderTopColor","tableInfo","tr","td","borderBottomWidth","borderBottomColor","paddingTop","tdFrequency","tdName","minHeight","SystemDisplay","systemId","isMediumUpScreen","useMediaQuery","selectSystem","systemFrequency","md","toUpperCase","padStart","index","lg","alignItems","smDown","Icon","formatDuration","intervalToDuration","start","sub","Date","now","seconds","end","format","tg","arry","t","channelsHeadingText","getContrastText","background","default","systemsHeadingText","MainUi","_theme","spaced","GlobalAlerts","snackbarReconnectedOpen","setSnackbarReconnectedOpen","holdAlerts","setHoldAlerts","isAppConnected","systemsCount","useEffect","setTimeout","handleSnackbarReconnectedClose","_event","reason","Alert","severity","Snackbar","autoHideDuration","ScrollToTop","pathname","useLocation","window","scrollTo","down","drawerWidth","tempDebugContent","App","getInstance","channelTgId","sendHoldOnChannel","prompt","sendReloadOnChannel","sendBlacklistOnChannel","sendWhitelistOnChannel","verboseLevel","sendSetDebugOnChannel","sendSkipOnChannel","updateTimer","setInterval","sendUpdateChannels","sendQueueTimer","clearInterval","path","ReceiverUi","configureStore","reducer","interfaceReducer","op25Reducer","preferencesReducer","dummyData","preloadedState","themeCreator","useDarkMode","createTheme","type","Theme","children","preferencesDarkMode","ThemeProvider","appStore","setStore","ReactDOM","render","StrictMode","CssBaseline","getElementById"],"mappings":"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","file":"static/js/main.cd71f002.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport type { RootState, AppDispatch } from \"./store\";\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../app/store\";\nimport { PreferencesState } from \"../../../types/PreferencesState\";\n\nexport const initialState: PreferencesState = {\n  darkmode: true,\n};\n\nexport const preferencesSlice = createSlice({\n  name: \"interface\",\n  initialState,\n  reducers: {\n    toogleDarkMode: (state) => {\n      state.darkmode = !state.darkmode;\n    },\n    setDarkMode: (state, action: PayloadAction<boolean>) => {\n      state.darkmode = action.payload;\n    },\n  },\n});\n\nexport const { toogleDarkMode, setDarkMode } = preferencesSlice.actions;\n\nexport const selectIsDarkMode = (state: RootState) =>\n  state.preferences.darkmode;\n\nexport default preferencesSlice.reducer;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../app/store\";\nimport { InterfaceState } from \"../../../types/InterfaceState\";\n\nexport const initialState: InterfaceState = {\n  isMenuDrawerOpen: true,\n  isMobileMenuDrawerOpen: false,\n  isPreferencesDrawerOpen: false,\n};\n\nexport const interfaceSlice = createSlice({\n  name: \"interface\",\n  initialState,\n  reducers: {\n    toggleMenuDrawerOpen: (state) => {\n      state.isMenuDrawerOpen = !state.isMenuDrawerOpen;\n    },\n    setMenuDrawerOpen: (state, action: PayloadAction<boolean>) => {\n      state.isMenuDrawerOpen = action.payload;\n    },\n    toggleMobileMenuDrawerOpen: (state) => {\n      state.isMobileMenuDrawerOpen = !state.isMobileMenuDrawerOpen;\n    },\n    setMobileMenuDrawerOpen: (state, action: PayloadAction<boolean>) => {\n      state.isMobileMenuDrawerOpen = action.payload;\n    },\n    togglePreferencesDrawerOpen: (state) => {\n      state.isPreferencesDrawerOpen = !state.isPreferencesDrawerOpen;\n    },\n    setPreferencesDrawerOpen: (state, action: PayloadAction<boolean>) => {\n      state.isPreferencesDrawerOpen = action.payload;\n    },\n  },\n});\n\nexport const {\n  toggleMenuDrawerOpen,\n  setMenuDrawerOpen,\n  toggleMobileMenuDrawerOpen,\n  setMobileMenuDrawerOpen,\n  togglePreferencesDrawerOpen,\n  setPreferencesDrawerOpen,\n} = interfaceSlice.actions;\n\nexport const isMenuDrawerOpen = (state: RootState): boolean =>\n  state.interface.isMenuDrawerOpen;\n\nexport const isMobileMenuDrawerOpen = (state: RootState): boolean =>\n  state.interface.isMobileMenuDrawerOpen;\n\nexport const isPreferencesOpen = (state: RootState): boolean =>\n  state.interface.isPreferencesDrawerOpen;\n\nexport default interfaceSlice.reducer;\n","import { NavLink } from \"react-router-dom\";\nimport { useAppDispatch, useAppSelector } from \"../redux/app/hooks\";\nimport { selectIsDarkMode } from \"../redux/slices/preferences/preferencesSlice\";\n\nimport {\n  isMenuDrawerOpen,\n  isMobileMenuDrawerOpen,\n  setMenuDrawerOpen,\n  setMobileMenuDrawerOpen,\n} from \"../redux/slices/interface/interfaceSlice\";\n\nimport {\n  AppBar,\n  createStyles,\n  Divider,\n  Drawer,\n  Hidden,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  makeStyles,\n  SwipeableDrawer,\n  Theme,\n  Toolbar,\n  Typography,\n  useTheme,\n} from \"@material-ui/core\";\n\nimport {\n  Home as HomeIcon,\n  PieChart as PieChartIcon,\n  InfoRounded as InfoRoundedIcon,\n  Build as BuildIcon,\n  History as HistoryIcon,\n} from \"@material-ui/icons\";\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    drawer: {\n      [theme.breakpoints.up(\"sm\")]: {\n        width: drawerWidth,\n        flexShrink: 0,\n      },\n    },\n\n    drawerPaper: {\n      width: drawerWidth,\n    },\n    // necessary for content to be below app bar\n    toolbar: theme.mixins.toolbar,\n  })\n);\n\nconst MenuDrawerContent = () => {\n  const isDarkMode = useAppSelector(selectIsDarkMode);\n\n  return (\n    <div>\n      <AppBar\n        position=\"relative\"\n        color={isDarkMode ? \"transparent\" : \"primary\"}\n      >\n        <Toolbar>\n          <Typography variant=\"h6\" noWrap>\n            OP25 (Boatbod)\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Divider />\n      <List>\n        <ListItem\n          button\n          component={NavLink}\n          to=\"/\"\n          activeClassName=\"Mui-selected\"\n          exact\n        >\n          <ListItemIcon>\n            <HomeIcon />\n          </ListItemIcon>\n          <ListItemText>Receiver</ListItemText>\n        </ListItem>\n        <ListItem\n          button\n          component={NavLink}\n          to=\"/history\"\n          activeClassName=\"Mui-selected\"\n        >\n          <ListItemIcon>\n            <HistoryIcon />\n          </ListItemIcon>\n          <ListItemText>History</ListItemText>\n        </ListItem>\n        <ListItem\n          button\n          component={NavLink}\n          to=\"/config\"\n          activeClassName=\"Mui-selected\"\n        >\n          <ListItemIcon>\n            <BuildIcon />\n          </ListItemIcon>\n          <ListItemText>Config</ListItemText>\n        </ListItem>\n        <ListItem\n          button\n          component={NavLink}\n          to=\"/plot\"\n          activeClassName=\"Mui-selected\"\n        >\n          <ListItemIcon>\n            <PieChartIcon />\n          </ListItemIcon>\n          <ListItemText>Plot</ListItemText>\n        </ListItem>\n      </List>\n      <Divider />\n      <List>\n        <ListItem\n          button\n          component={NavLink}\n          to=\"/about\"\n          activeClassName=\"Mui-selected\"\n        >\n          <ListItemIcon>\n            <InfoRoundedIcon />\n          </ListItemIcon>\n          <ListItemText>About</ListItemText>\n        </ListItem>\n      </List>\n    </div>\n  );\n};\n\nconst container =\n  globalThis !== undefined ? () => globalThis.document.body : undefined;\n\nconst MenuDrawer = () => {\n  const dispatch = useAppDispatch();\n  const isOpen = useAppSelector(isMenuDrawerOpen);\n  const mobileOpen = useAppSelector(isMobileMenuDrawerOpen);\n  const classes = useStyles();\n  const theme = useTheme();\n\n  return (\n    <nav className={classes.drawer}>\n      <Hidden smUp implementation=\"css\">\n        <SwipeableDrawer\n          container={container}\n          variant=\"temporary\"\n          anchor={theme.direction === \"rtl\" ? \"right\" : \"left\"}\n          open={mobileOpen}\n          onOpen={() => {\n            dispatch(setMobileMenuDrawerOpen(true));\n          }}\n          onClose={() => {\n            dispatch(setMobileMenuDrawerOpen(false));\n          }}\n          classes={{\n            paper: classes.drawerPaper,\n          }}\n          ModalProps={{\n            keepMounted: true, // Better open performance on mobile.\n          }}\n        >\n          <MenuDrawerContent />\n        </SwipeableDrawer>\n      </Hidden>\n      <Hidden xsDown implementation=\"css\">\n        <Drawer\n          classes={{\n            paper: classes.drawerPaper,\n          }}\n          variant=\"persistent\"\n          anchor={theme.direction === \"rtl\" ? \"right\" : \"left\"}\n          open={isOpen}\n          onClose={() => {\n            dispatch(setMenuDrawerOpen(false));\n          }}\n          ModalProps={{\n            keepMounted: true, // Better open performance on mobile.\n          }}\n        >\n          <MenuDrawerContent />\n        </Drawer>\n      </Hidden>\n    </nav>\n  );\n};\n\nexport default MenuDrawer;\n","import { useAppDispatch, useAppSelector } from \"../redux/app/hooks\";\nimport {\n  isPreferencesOpen,\n  setPreferencesDrawerOpen,\n} from \"../redux/slices/interface/interfaceSlice\";\nimport {\n  selectIsDarkMode,\n  setDarkMode,\n} from \"../redux/slices/preferences/preferencesSlice\";\n\nimport {\n  AppBar,\n  createStyles,\n  Divider,\n  FormControlLabel,\n  FormGroup,\n  Grid,\n  IconButton,\n  makeStyles,\n  SwipeableDrawer,\n  Switch,\n  Theme,\n  Toolbar,\n  Typography,\n  useTheme,\n} from \"@material-ui/core\";\n\nimport { Close as CloseIcon } from \"@material-ui/icons\";\n\nimport { blue } from \"@material-ui/core/colors\";\n\nconst drawerWidth = 300;\n\ninterface StylesProps {\n  isDarkMode: boolean;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    appBar: {\n      [theme.breakpoints.up(\"sm\")]: {\n        width: `${drawerWidth}px`,\n      },\n    },\n    drawer: {\n      [theme.breakpoints.up(\"sm\")]: {\n        width: drawerWidth,\n        flexShrink: 0,\n      },\n    },\n    gridSpace: {\n      paddingLeft: theme.spacing(2),\n    },\n    drawerPaper: {\n      width: drawerWidth,\n    },\n    preferencesHeader: {\n      color: (props: StylesProps) =>\n        props.isDarkMode ? theme.palette.common.white : blue[800],\n    },\n    checkboxMaxWidth: {\n      width: 180,\n    },\n    toolbar: theme.mixins.toolbar, // necessary for content to be below app bar\n  })\n);\n\nconst container =\n  globalThis !== undefined ? () => globalThis.document.body : undefined;\n\nconst PreferencesDrawer = () => {\n  const dispatch = useAppDispatch();\n  const isOpen = useAppSelector(isPreferencesOpen);\n  const isDarkMode = useAppSelector(selectIsDarkMode);\n  const classes = useStyles({ isDarkMode });\n  const theme = useTheme();\n\n  return (\n    <nav className={classes.drawer}>\n      <SwipeableDrawer\n        container={container}\n        variant=\"temporary\"\n        anchor={theme.direction === \"rtl\" ? \"left\" : \"right\"}\n        open={isOpen}\n        onClose={() => {\n          dispatch(setPreferencesDrawerOpen(false));\n        }}\n        onOpen={() => {\n          dispatch(setPreferencesDrawerOpen(true));\n        }}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n        ModalProps={{\n          keepMounted: true, // Better open performance on mobile.\n        }}\n      >\n        <AppBar\n          position=\"relative\"\n          className={classes.appBar}\n          color={isDarkMode ? \"transparent\" : \"primary\"}\n        >\n          <Toolbar></Toolbar>\n        </AppBar>\n        <Divider />\n        <Grid className={classes.gridSpace} container spacing={0}>\n          <Grid item xs={12}>\n            <Grid container justifyContent=\"flex-end\">\n              <IconButton\n                onClick={() => {\n                  dispatch(setPreferencesDrawerOpen(false));\n                }}\n              >\n                <CloseIcon />\n              </IconButton>\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <Typography className={classes.preferencesHeader} variant=\"h6\">\n              Theme\n            </Typography>\n          </Grid>\n          <Grid item xs={12}>\n            <FormGroup>\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={isDarkMode}\n                    onChange={(e) => {\n                      dispatch(setDarkMode(e.target.checked));\n                    }}\n                    name=\"darkModeEnabled\"\n                  />\n                }\n                label=\"Dark Mode\"\n              />\n            </FormGroup>\n          </Grid>\n        </Grid>\n      </SwipeableDrawer>\n    </nav>\n  );\n};\n\nexport default PreferencesDrawer;\n","import { useAppDispatch, useAppSelector } from \"../redux/app/hooks\";\nimport MenuDrawer from \"./MenuDrawer\";\nimport PreferencesDrawer from \"./PreferencesDrawer\";\nimport {\n  isMenuDrawerOpen,\n  toggleMenuDrawerOpen,\n  toggleMobileMenuDrawerOpen,\n  togglePreferencesDrawerOpen,\n} from \"../redux/slices/interface/interfaceSlice\";\n\nimport {\n  AppBar,\n  createStyles,\n  Hidden,\n  IconButton,\n  makeStyles,\n  Theme,\n  Toolbar,\n  Tooltip,\n} from \"@material-ui/core\";\n\nimport { Menu as MenuIcon, Settings as SettingsIcon } from \"@material-ui/icons\";\n\ninterface useStylesProps {\n  isOpen: boolean;\n}\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    grow: {\n      flexGrow: 1,\n    },\n    appBar: {\n      [theme.breakpoints.up(\"sm\")]: {\n        width: (props: useStylesProps) => (props.isOpen ? `calc(100%)` : \"\"),\n        paddingLeft: (props: useStylesProps) => props.isOpen && drawerWidth,\n      },\n    },\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3),\n    },\n  })\n);\n\nconst AppBarWithToolbar = () => {\n  const dispatch = useAppDispatch();\n  const isOpen = useAppSelector(isMenuDrawerOpen);\n  const classes = useStyles({ isOpen });\n\n  return (\n    <AppBar position=\"fixed\" className={classes.appBar}>\n      <MenuDrawer />\n      <Toolbar>\n        <Hidden smUp>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            onClick={() => {\n              dispatch(toggleMobileMenuDrawerOpen());\n            }}\n          >\n            <MenuIcon />\n          </IconButton>\n        </Hidden>\n        <Hidden xsDown>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            onClick={() => {\n              dispatch(toggleMenuDrawerOpen());\n            }}\n          >\n            <MenuIcon />\n          </IconButton>\n        </Hidden>\n        <div className={classes.grow} />\n        <Tooltip title=\"Preferences\" aria-label=\"preferences\">\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"preferences\"\n            onClick={() => {\n              dispatch(togglePreferencesDrawerOpen());\n            }}\n          >\n            <SettingsIcon />\n          </IconButton>\n        </Tooltip>\n      </Toolbar>\n      <PreferencesDrawer />\n    </AppBar>\n  );\n};\n\nexport default AppBarWithToolbar;\n","import AppBarWithToolbar from \"./AppBarWithToolbar\";\n\nimport { createStyles, makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    root: {\n      display: \"flex\",\n    },\n  })\n);\n\nconst TopMenuBarAndDrawers = () => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBarWithToolbar />\n    </div>\n  );\n};\n\nexport default TopMenuBarAndDrawers;\n","import axios from \"axios\";\n\nexport const AXIOS_BASE_URL = process.env.REACT_APP_DEV_SERVER_API\n  ? process.env.REACT_APP_DEV_SERVER_API\n  : \"/\";\n\nconst Axios = () => {\n  return axios.create({\n    baseURL: AXIOS_BASE_URL,\n    method: \"post\",\n    headers: { \"Content-type\": \"application/json\" },\n    timeout: 5000,\n    withCredentials: false,\n  });\n};\n\nexport default Axios;\n","// function term_config(d: any) {\n// TODO: Remove ANY Type\n//   var lg_step = 1200;\n//   var sm_step = 100;\n//   var updated = 0;\n//   if (\n//     d[\"tuning_step_large\"] != undefined &&\n//     d[\"tuning_step_large\"] != lg_step\n//   ) {\n//     lg_step = d[\"tuning_step_large\"];\n//     updated++;\n//   }\n//   if (\n//     d[\"tuning_step_small\"] != undefined &&\n//     d[\"tuning_step_small\"] != sm_step\n//   ) {\n//     sm_step = d[\"tuning_step_small\"];\n//     updated++;\n//   }\n//   if (updated) {\n//     set_tuning_step_sizes(lg_step, sm_step);\n//   }\n// }\n// function set_tuning_step_sizes(lg_step = 1200, sm_step = 100) {\n//   var title_str = \"Adjust tune \";\n//   var bn_t1_U = document.getElementById(\"t1_U\");\n//   var bn_t2_U = document.getElementById(\"t2_U\");\n//   var bn_t1_D = document.getElementById(\"t1_D\");\n//   var bn_t2_D = document.getElementById(\"t2_D\");\n//   var bn_t1_u = document.getElementById(\"t1_u\");\n//   var bn_t2_u = document.getElementById(\"t2_u\");\n//   var bn_t1_d = document.getElementById(\"t1_d\");\n//   var bn_t2_d = document.getElementById(\"t2_d\");\n//   if (bn_t1_U != null && bn_t2_U != null) {\n//     bn_t1_U.setAttribute(\"title\", title_str + \"+\" + lg_step);\n//     bn_t2_U.setAttribute(\"title\", title_str + \"+\" + lg_step);\n//     bn_t1_U.setAttribute(\n//       \"onclick\",\n//       \"javascript:f_tune_button(\" + lg_step + \");\"\n//     );\n//     bn_t2_U.setAttribute(\n//       \"onclick\",\n//       \"javascript:f_tune_button(\" + lg_step + \");\"\n//     );\n//   }\n//   if (bn_t1_D != null && bn_t2_D != null) {\n//     bn_t1_D.setAttribute(\"title\", title_str + \"-\" + lg_step);\n//     bn_t2_D.setAttribute(\"title\", title_str + \"-\" + lg_step);\n//     bn_t1_D.setAttribute(\n//       \"onclick\",\n//       \"javascript:f_tune_button(-\" + lg_step + \");\"\n//     );\n//     bn_t2_D.setAttribute(\n//       \"onclick\",\n//       \"javascript:f_tune_button(-\" + lg_step + \");\"\n//     );\n//   }\n//   if (bn_t1_u != null && bn_t2_u != null) {\n//     bn_t1_u.setAttribute(\"title\", title_str + \"+\" + sm_step);\n//     bn_t2_u.setAttribute(\"title\", title_str + \"+\" + sm_step);\n//     bn_t1_u.setAttribute(\n//       \"onclick\",\n//       \"javascript:f_tune_button(\" + sm_step + \");\"\n//     );\n//     bn_t2_u.setAttribute(\n//       \"onclick\",\n//       \"javascript:f_tune_button(\" + sm_step + \");\"\n//     );\n//   }\n//   if (bn_t1_d != null && bn_t2_d != null) {\n//     bn_t1_d.setAttribute(\"title\", title_str + \"-\" + sm_step);\n//     bn_t2_d.setAttribute(\"title\", title_str + \"-\" + sm_step);\n//     bn_t1_d.setAttribute(\n//       \"onclick\",\n//       \"javascript:f_tune_button(-\" + sm_step + \");\"\n//     );\n//     bn_t2_d.setAttribute(\n//       \"onclick\",\n//       \"javascript:f_tune_button(-\" + sm_step + \");\"\n//     );\n//   }\n// }\n\n// function rx_update(d) {\n//   plotfiles = [];\n//   if ((d[\"files\"] != undefined) && (d[\"files\"].length > 0)) {\n//       for (var i=0; i < d[\"files\"].length; i++) {\n//           if (channel_list.length > 0) {\n//               expr = new RegExp(\"plot\\-\" + channel_list[channel_index] + \"\\-\");\n//           }\n//           else {\n//               expr = new RegExp(\"plot\\-0\\-\");\n//           }\n\n//           if (expr.test(d[\"files\"][i])) {\n//               plotfiles.push(d[\"files\"][i]);\n//           }\n//       }\n\n//       for (var i=0; i < 5; i++) {\n//           var img = document.getElementById(\"img\" + i);\n//           if (i < plotfiles.length) {\n//               if (img['src'] != plotfiles[i]) {\n//                   img['src'] = plotfiles[i];\n//                   img.style[\"display\"] = \"\";\n//               }\n//           }\n//           else {\n//               img.style[\"display\"] = \"none\";\n//           }\n//       }\n//   }\n//   else {\n//       var img = document.getElementById(\"img0\");\n//       img.style[\"display\"] = \"none\";\n//   }\n//   if (d[\"error\"] != undefined)\n//       error_val = d[\"error\"];\n//   if (d[\"fine_tune\"] != undefined)\n//       fine_tune = d[\"fine_tune\"];\n// }\n\nimport { Draft } from \"@reduxjs/toolkit\";\nimport { StoreType } from \"redux/app/store\";\nimport { addToSendQueue } from \"redux/slices/op25/op25Slice\";\nimport { AdjacentData } from \"types/AdjacentData\";\nimport { Channel } from \"types/Channel\";\nimport { Frequencies } from \"types/Frequency\";\nimport {\n  OP25ChannelUpdateChannelData,\n  OP25TrunkUpdateChannelData,\n  OP25TrunkUpdateChannelDataAdjacentDataItem,\n  OP25TrunkUpdateChannelDataFrequency,\n  OP25TrunkUpdateChannelDataFrequencyData,\n  OP25TypeChannelUpdate,\n  OP25TypeTerminalConfig,\n  OP25TypeTrunkUpdate,\n} from \"types/OP25\";\nimport { OP25State } from \"types/OP25State\";\nimport { System } from \"types/System\";\nimport { TerminalConfig } from \"types/TerminalConfig\";\n\nexport const frequencyToString = (frequency: number) => {\n  return (frequency / 1000000.0).toFixed(6);\n};\n\nexport const ppmToString = (ppm: number) => {\n  return ppm.toFixed(3);\n};\n\nexport const channel_update = (\n  data: OP25TypeChannelUpdate,\n  state: Draft<OP25State>\n) => {\n  if (data.json_type === \"channel_update\" && data.channels) {\n    data.channels.forEach((channel) => {\n      const channelData = data[channel] as OP25ChannelUpdateChannelData;\n      const newData: Channel = {\n        id: Number.parseInt(channel),\n        encrypted: channelData.encrypted === 1,\n        frequency: channelData.freq,\n        mode: channelData.mode,\n        name: channelData.name,\n        sourceAddress: channelData.srcaddr,\n        sourceTag: channelData.srctag,\n        stream: channelData.stream,\n        msgqid: channelData.msgqid,\n        ppm: channelData.ppm,\n        systemName: channelData.system,\n        tdma: channelData.tdma,\n        tgID: channelData.tgid,\n        tgTag: channelData.tag,\n      };\n\n      const currentItemIndex = state.channels.findIndex(\n        (ch) => ch.id === Number.parseInt(channel)\n      );\n\n      if (currentItemIndex === -1) {\n        state.channels.push(newData);\n      } else {\n        state.channels[currentItemIndex] = newData;\n      }\n    });\n  }\n};\n\nexport const trunk_update = (\n  data: OP25TypeTrunkUpdate,\n  state: Draft<OP25State>\n) => {\n  if (data.json_type === \"trunk_update\") {\n    Object.keys(data)\n      .filter((id) => id !== \"json_type\" && id !== \"nac\")\n      .forEach((id) => {\n        const systemData = data[id] as OP25TrunkUpdateChannelData;\n\n        let frequencies: Frequencies = [];\n        let adjacentdata: AdjacentData = [];\n\n        Object.keys(\n          systemData.frequencies as OP25TrunkUpdateChannelDataFrequency\n        ).forEach((freq) => {\n          const freqDisplayData = (systemData.frequencies as OP25TrunkUpdateChannelDataFrequency)[\n            freq\n          ];\n\n          const freqData = (systemData.frequency_data as OP25TrunkUpdateChannelDataFrequencyData)[\n            Number.parseInt(freq)\n          ];\n\n          frequencies.push({\n            frequency: Number.parseInt(freq),\n            counter: freqData.counter,\n            lastActivitySeconds: Number.parseInt(freqData.last_activity),\n            talkgroups: freqData.tgids.map((talkgroup) => ({\n              id: talkgroup,\n            })),\n            displayText: freqDisplayData,\n          });\n        });\n\n        Object.keys(\n          systemData.adjacent_data as OP25TrunkUpdateChannelDataAdjacentDataItem\n        ).forEach((adjItem) => {\n          const adjItemData = (systemData.adjacent_data as OP25TrunkUpdateChannelDataAdjacentDataItem)[\n            adjItem\n          ];\n\n          adjacentdata.push({\n            id: Number.parseInt(adjItem),\n            rfid: adjItemData.rfid,\n            stid: adjItemData.stid,\n            uplink: { frequency: adjItemData.uplink },\n            table: adjItemData.table,\n          });\n        });\n\n        const newData: System = {\n          id: Number.parseInt(id),\n          syid: systemData.syid,\n          rfid: systemData.rfid,\n          stid: systemData.stid,\n          rxFrequency: systemData.rxchan,\n          txFrequency: systemData.txchan,\n          wacn: systemData.wacn,\n          nac: systemData.nac,\n          secondaryFrequencies: systemData.secondary,\n          frequencies: frequencies,\n          name: systemData.system,\n          TopLine: systemData.top_line,\n          lastTSBK: systemData.last_tsbk,\n          adjacentData: adjacentdata,\n        };\n\n        const currentItemIndex = state.systems.findIndex(\n          (sys) => sys.id === Number.parseInt(id)\n        );\n\n        if (currentItemIndex === -1) {\n          state.systems.push(newData);\n        } else {\n          state.systems[currentItemIndex] = newData;\n        }\n      });\n  }\n};\n\nexport const terminal_config = (\n  data: OP25TypeTerminalConfig,\n  state: Draft<OP25State>\n) => {\n  if (data.json_type === \"terminal_config\") {\n    const config: TerminalConfig = {\n      module: data.module,\n      terminalType: data.terminal_type,\n      cursesPlotInterval: data.curses_plot_interval,\n      httpPlotInterval: data.http_plot_interval,\n      httpPlotDirectory: data.http_plot_directory,\n      tuningStepSizeLarge: data.tuning_step_large,\n      tuningStepSizeSmall: data.tuning_step_small,\n    };\n\n    state.terminalConfig = config;\n  }\n};\n\nexport class OP25 {\n  private static instance: OP25;\n\n  private _store: StoreType | null;\n\n  static getInstance() {\n    if (!OP25.instance) {\n      OP25.instance = new OP25();\n    }\n\n    return OP25.instance;\n  }\n\n  constructor() {\n    this._store = null;\n  }\n\n  setStore(store: StoreType): void {\n    this._store = store;\n  }\n\n  async sendGetSimpleConfig(): Promise<void> {\n    if (!this._store) {\n      return;\n    }\n\n    await this._store.dispatch(\n      addToSendQueue({ command: \"get_config\", arg1: 0, arg2: 0 })\n    );\n  }\n\n  async sendGetFullConfig(): Promise<void> {\n    if (!this._store) {\n      return;\n    }\n\n    await this._store.dispatch(\n      addToSendQueue({ command: \"get_full_config\", arg1: 0, arg2: 0 })\n    );\n  }\n\n  async sendUpdateChannels(): Promise<void> {\n    if (!this._store) {\n      return;\n    }\n    const state = this._store.getState();\n\n    const { channels } = state.op25;\n\n    if (channels.length === 0) {\n      await this._store?.dispatch(\n        addToSendQueue({ command: \"update\", arg1: 0, arg2: 0 })\n      );\n    } else {\n      channels.forEach(async (channel) => {\n        await this._store?.dispatch(\n          addToSendQueue({\n            command: \"update\",\n            arg1: 0,\n            arg2: channel.id,\n          })\n        );\n      });\n    }\n  }\n\n  async sendHoldOnChannel(\n    channelId: number,\n    talkgroupId: number\n  ): Promise<void> {\n    await this._store?.dispatch(\n      addToSendQueue({ command: \"hold\", arg1: talkgroupId, arg2: channelId })\n    );\n  }\n\n  async sendUnHoldOnChannel(channelId: number): Promise<void> {\n    await this._store?.dispatch(\n      addToSendQueue({ command: \"hold\", arg1: 0, arg2: channelId })\n    );\n  }\n\n  async sendSkipOnChannel(channelId: number): Promise<void> {\n    await this._store?.dispatch(\n      addToSendQueue({ command: \"skip\", arg1: 0, arg2: channelId })\n    );\n  }\n\n  async sendBlacklistOnChannel(\n    channelId: number,\n    talkgroupId: number\n  ): Promise<void> {\n    await this._store?.dispatch(\n      addToSendQueue({ command: \"lockout\", arg1: talkgroupId, arg2: channelId })\n    );\n  }\n\n  async sendWhitelistOnChannel(\n    channelId: number,\n    talkgroupId: number\n  ): Promise<void> {\n    await this._store?.dispatch(\n      addToSendQueue({\n        command: \"whitelist\",\n        arg1: talkgroupId,\n        arg2: channelId,\n      })\n    );\n  }\n\n  async sendReloadOnChannel(channelId: number): Promise<void> {\n    await this._store?.dispatch(\n      addToSendQueue({ command: \"reload\", arg1: 0, arg2: channelId })\n    );\n  }\n\n  async sendSetDebugOnChannel(\n    channelId: number,\n    debugLevel: number\n  ): Promise<void> {\n    await this._store?.dispatch(\n      addToSendQueue({\n        command: \"set_debug\",\n        arg1: debugLevel,\n        arg2: channelId,\n      })\n    );\n  }\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"redux/app/store\";\nimport {\n  OP25SendQueueItem,\n  OP25TypeChannelUpdate,\n  OP25TypeTerminalConfig,\n  OP25TypeTrunkUpdate,\n  OP25Updates,\n} from \"types/OP25\";\nimport { OP25State } from \"types/OP25State\";\nimport axios from \"utils/axios\";\nimport { channel_update, terminal_config, trunk_update } from \"lib/op25\";\nimport { Channel, Channels } from \"types/Channel\";\nimport { System, Systems } from \"types/System\";\nimport { AxiosResponse } from \"axios\";\n\nconst SEND_QLIMIT = 10;\n\nconst initialState: OP25State = {\n  isConnected: false,\n  channels: [],\n  systems: [],\n  terminalConfig: undefined,\n  send_queue: [{ command: \"get_config\", arg1: 0, arg2: 0 }],\n};\n\nexport const sendQueue = createAsyncThunk(\n  \"op25/sendQueue\",\n  async (_, { getState, dispatch }) => {\n    const state = (getState() as any).op25 as OP25State;\n\n    const queue: OP25SendQueueItem[] = [...state.send_queue];\n    dispatch(emptySendQueue());\n\n    const response = await axios().post(\"/\", queue);\n\n    return {\n      status: response.status,\n      statusText: response.statusText,\n      data: response.data,\n    };\n  }\n);\n\nexport const addToSendQueue = createAsyncThunk(\n  \"op25/addToSendQueue\",\n  async (send_command: OP25SendQueueItem, { getState, dispatch }) => {\n    const state = (getState() as any).op25 as OP25State;\n\n    if (state.send_queue.length >= SEND_QLIMIT) {\n      dispatch(unshiftOnSendQueue());\n    }\n\n    dispatch(pushToSendQueue(send_command));\n  }\n);\n\nexport const op25Slice = createSlice({\n  name: \"op25\",\n  initialState,\n  reducers: {\n    pushToSendQueue: (state, action: PayloadAction<OP25SendQueueItem>) => {\n      state.send_queue.push(action.payload);\n    },\n    unshiftOnSendQueue: (state) => {\n      state.send_queue.unshift();\n    },\n    emptySendQueue: (state) => {\n      state.send_queue = [];\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(sendQueue.fulfilled, (state, action) => {\n        state.isConnected = true;\n        const {\n          status,\n          statusText,\n          data,\n        } = action.payload as AxiosResponse<any>;\n        if (status !== 200) {\n          // TODO: Show the user SOMETHING!\n          console.log(`Error ${status.toString(10)}: ${statusText}`);\n          return;\n        }\n\n        if (data) {\n          const dataUpdates: OP25Updates = data;\n          try {\n            dataUpdates.forEach((update) => {\n              if (!update.json_type) {\n                console.log(\"no json_type\", update);\n                return;\n              }\n\n              switch (update.json_type) {\n                case \"trunk_update\":\n                  //console.log(\"trunk_update\", update);\n                  trunk_update(update as OP25TypeTrunkUpdate, state);\n                  return;\n                case \"change_freq\":\n                  console.log(\"***** change_freq *****\", update);\n                  // change_freq(update);\n                  return;\n                case \"channel_update\":\n                  channel_update(update as OP25TypeChannelUpdate, state);\n                  return;\n                case \"rx_update\":\n                  console.log(\"***** rx_update *****\", update); // Plot Updates\n                  // rx_update(update);\n                  return;\n                case \"terminal_config\":\n                  terminal_config(update as OP25TypeTerminalConfig, state);\n                  return;\n                case \"full_config\":\n                  console.log(\"full_config\", update);\n                  return;\n                default:\n                  console.log(\"unknown server data type\", update.json_type);\n                  return;\n              }\n            });\n          } catch (err) {\n            // TODO: Show the user SOMETHING!\n            console.log(\"Error parsing response: \", err);\n          }\n        }\n      })\n      .addCase(sendQueue.rejected, (state) => {\n        if (state.isConnected === undefined || state.isConnected) {\n          state.isConnected = false;\n          globalThis.scroll({ top: 0, left: 0, behavior: \"smooth\" });\n        }\n      })\n      .addCase(addToSendQueue.fulfilled, (_) => {});\n  },\n});\n\nexport const {\n  pushToSendQueue,\n  unshiftOnSendQueue,\n  emptySendQueue,\n} = op25Slice.actions;\n\nexport const isConnected = (state: RootState): boolean | undefined =>\n  state.op25.isConnected;\n\nexport const selectChannels = (state: RootState): Channels =>\n  state.op25.channels;\n\nexport const selectChannel = (channelId: number) => (\n  state: RootState\n): Channel | undefined =>\n  state.op25.channels.find((channel) => channel.id === channelId);\n\nexport const selectSystemFromChannelId = (channelId: number) => (\n  state: RootState\n): System | undefined => {\n  const channel = state.op25.channels.find(\n    (channel) => channel.id === channelId\n  );\n  return channel\n    ? state.op25.systems.find((system) => system.name === channel.systemName)\n    : undefined;\n};\n\nexport const selectSystems = (state: RootState): Systems => state.op25.systems;\n\nexport const getSystemsCount = (state: RootState): number =>\n  state.op25.systems.length;\n\nexport const selectSystem = (systemId: number) => (\n  state: RootState\n): System | undefined =>\n  state.op25.systems.find((system) => system.id === systemId);\n\nexport const selectStepSizes = (\n  state: RootState\n): { stepSizeSmall: number; stepSizeLarge: number } => ({\n  stepSizeSmall: state.op25.terminalConfig?.tuningStepSizeSmall || 100,\n  stepSizeLarge: state.op25.terminalConfig?.tuningStepSizeLarge || 1200,\n});\n\nexport default op25Slice.reducer;\n","import { useState } from \"react\";\nimport { useAppSelector } from \"redux/app/hooks\";\nimport { selectChannel, selectStepSizes } from \"redux/slices/op25/op25Slice\";\nimport { frequencyToString } from \"lib/op25\";\nimport { DataGrid, GridColDef, GridRenderCellParams } from \"@mui/x-data-grid\";\nimport { selectIsDarkMode } from \"redux/slices/preferences/preferencesSlice\";\n\nimport {\n  Card,\n  CardActions,\n  CardContent,\n  Button,\n  Theme,\n  Typography,\n  IconButton,\n  Tooltip,\n  Grid,\n  CardHeader,\n  createStyles,\n  makeStyles,\n} from \"@material-ui/core\";\n\nimport {\n  FiChevronsLeft as DoubleArrowsLeftIcon,\n  FiChevronLeft as ArrowLeftIcon,\n  FiChevronsRight as DoubleArrowsRightIcon,\n  FiChevronRight as ArrowRightIcon,\n  FiMinimize2 as MinimizeIcon,\n  FiMaximize2 as MaximizeIcon,\n} from \"react-icons/fi\";\n\ntype ChannelDisplayProps = {\n  className?: string | undefined;\n  channelId: number;\n  onChannelHoldTalkgroup: (channelId: number, channelTgId: number) => void;\n  onGoToTalkgroup: (channelId: number) => void;\n  onReloadChannel: (channelId: number) => void;\n  onBlacklistTalkgroup: (channelId: number, channelTgId: number) => void;\n  onWhitelistTalkgroup: (channelId: number, channelTgId: number) => void;\n  onLogVerboseChange: (channelId: number) => void;\n  onSkipTalkgroup: (channelId: number) => void;\n};\n\ntype useStylesProps = {\n  isEncrypted: boolean;\n  isDarkMode: boolean;\n};\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      minWidth: 275,\n      border: \"0\",\n    },\n    cardContent: {\n      paddingRight: 15,\n      borderLeftStyle: (props: useStylesProps) =>\n        props.isDarkMode ? \"none\" : \"solid\",\n      borderRightStyle: (props: useStylesProps) =>\n        props.isDarkMode ? \"none\" : \"solid\",\n      borderWidth: 1,\n    },\n    cardHeader: {\n      backgroundColor: (props: useStylesProps) =>\n        props.isEncrypted ? \"red\" : theme.palette.primary.main,\n      borderLeftStyle: (props: useStylesProps) =>\n        props.isDarkMode ? \"none\" : \"solid\",\n      borderRightStyle: (props: useStylesProps) =>\n        props.isDarkMode ? \"none\" : \"solid\",\n      borderTopStyle: (props: useStylesProps) =>\n        props.isDarkMode ? \"none\" : \"solid\",\n      borderWidth: 1,\n      borderColor: (props: useStylesProps) =>\n        props.isEncrypted ? \"red\" : theme.palette.primary.main,\n      margin: \"0\",\n      textAlign: \"center\",\n      height: 30,\n      color: theme.palette.primary.contrastText,\n    },\n    cardHeaderActions: {\n      display: \"block\",\n      marginTop: -15,\n    },\n    currentchannel: {\n      marginLeft: 15,\n      marginBottom: 20,\n      overflow: \"auto\",\n    },\n    grid: {\n      height: 260,\n    },\n    gridRoot: {\n      fontSize: 12,\n      border: \"0\",\n    },\n    rowRoot: {\n      border: \"0\",\n    },\n    cellRoot: {\n      paddingLeft: 5,\n      paddingRight: 5,\n      border: \"0\",\n    },\n    cardActions: {\n      paddingBottom: 20,\n      borderLeftStyle: (props: useStylesProps) =>\n        props.isDarkMode ? \"none\" : \"solid\",\n      borderRightStyle: (props: useStylesProps) =>\n        props.isDarkMode ? \"none\" : \"solid\",\n      borderBottomStyle: (props: useStylesProps) =>\n        props.isDarkMode ? \"none\" : \"solid\",\n      borderWidth: 1,\n      flexWrap: \"wrap\",\n      justifyContent: \"center\",\n    },\n    actionbuttons: {\n      paddingLeft: 15,\n      paddingRight: 15,\n    },\n  })\n);\n\nconst ChannelDisplay = ({\n  className,\n  channelId,\n  onChannelHoldTalkgroup,\n  onGoToTalkgroup,\n  onReloadChannel,\n  onBlacklistTalkgroup,\n  onWhitelistTalkgroup,\n  onLogVerboseChange,\n  onSkipTalkgroup,\n}: ChannelDisplayProps) => {\n  const channel = useAppSelector(selectChannel(channelId));\n  const isDarkMode = useAppSelector(selectIsDarkMode);\n  const { stepSizeSmall, stepSizeLarge } = useAppSelector(selectStepSizes);\n  const [minimized, setMinimized] = useState(false);\n  const classes = useStyles({\n    isEncrypted: channel ? channel.encrypted : false,\n    isDarkMode,\n  });\n\n  const columns: GridColDef[] = [\n    { field: \"id\", hide: true, sortable: false, width: 0 },\n    {\n      field: \"stateName\",\n      align: \"right\",\n      sortable: false,\n      width: 110,\n      renderHeader: (_) => <></>,\n      renderCell: (params: GridRenderCellParams) =>\n        params.getValue(params.id, \"description\") ? (\n          <Tooltip\n            title={`${\n              params.getValue(params.id, \"description\") &&\n              params.getValue(params.id, \"description\")?.toString()\n            }`}\n            enterDelay={500}\n            placement=\"right\"\n          >\n            <span>{params.getValue(params.id, \"stateName\")}</span>\n          </Tooltip>\n        ) : (\n          <span>{params.getValue(params.id, \"stateName\")}</span>\n        ),\n    },\n    {\n      field: \"stateValue\",\n      align: \"left\",\n      sortable: false,\n      renderHeader: (_) => <></>,\n      renderCell: (params: GridRenderCellParams) =>\n        params.getValue(params.id, \"stateName\") === \"System Name:\" ? (\n          <Tooltip\n            title={`${\n              params.getValue(params.id, \"stateValue\") &&\n              params.getValue(params.id, \"stateValue\")?.toString()\n            }`}\n            enterDelay={500}\n            placement=\"right\"\n          >\n            <span>{params.getValue(params.id, \"stateValue\")}</span>\n          </Tooltip>\n        ) : (\n          <span>{params.getValue(params.id, \"stateValue\")}</span>\n        ),\n    },\n    { field: \"description\", hide: true, sortable: false },\n  ];\n\n  const rows = [\n    {\n      id: 1,\n      stateName: \"Group Address:\",\n      stateValue: channel && channel.tgID ? channel.tgID : \"-\",\n      description:\n        \"Also known as the Talkgroup ID, this is the unique ID assigned to a group.\",\n    },\n    {\n      id: 2,\n      stateName: \"Source Address:\",\n      stateValue:\n        channel && channel.sourceAddress ? channel.sourceAddress : \"-\",\n      description: \"ID of the person talking (Radio ID / Unit ID)\",\n    },\n    {\n      id: 3,\n      stateName: \"Frequency:\",\n      stateValue:\n        channel && channel.frequency\n          ? frequencyToString(channel.frequency)\n          : \"-\",\n    },\n    {\n      id: 4,\n      stateName: \"Encrypted:\",\n      stateValue: channel ? (channel.encrypted ? \"Yes\" : \"No\") : \"-\",\n      description:\n        \"Shows as yes if this channel is encrpyted (false positives do occur)\",\n    },\n    {\n      id: 5,\n      stateName: \"System Name:\",\n      stateValue: channel ? channel.systemName : \"-\",\n      nextFunction: () => {},\n    },\n  ];\n\n  const getCardHeaderText = (): string => {\n    if (minimized) {\n      if (channel) {\n        return channel.name || channel.tgTag || channel.tgID\n          ? `${channel.name ? `${channel.name} / ` : \"\"}${\n              channel.tgTag || channel.tgID\n                ? channel.tgTag\n                  ? channel.tgTag\n                  : channel.tgID\n                : channel.name\n                ? \"-\"\n                : \"\"\n            }`\n          : \"-\";\n      } else {\n        return \"-\";\n      }\n    } else {\n      return channel ? (channel.name ? channel.name : \"-\") : \"-\";\n    }\n  };\n\n  const toggleMinimized = () => {\n    setMinimized(!minimized);\n  };\n\n  return (\n    <Card\n      className={`${classes.root}${\n        className !== undefined ? ` ${className}` : \"\"\n      }`}\n      variant=\"outlined\"\n    >\n      <CardHeader\n        title={getCardHeaderText()}\n        action={\n          <span className={classes.cardHeaderActions}>\n            <IconButton onClick={toggleMinimized}>\n              {minimized ? <MaximizeIcon /> : <MinimizeIcon />}\n            </IconButton>\n          </span>\n        }\n        className={classes.cardHeader}\n        titleTypographyProps={{ variant: \"subtitle2\" }}\n      />\n      {!minimized && (\n        <>\n          <CardContent className={classes.cardContent}>\n            <Typography\n              className={classes.currentchannel}\n              variant=\"h5\"\n              component=\"h2\"\n            >\n              {channel && (channel.tgTag || channel.tgID)\n                ? channel.tgTag\n                  ? channel.tgTag\n                  : channel.tgID\n                : \"-\"}\n            </Typography>\n            <div className={classes.grid}>\n              <DataGrid\n                classes={{\n                  root: classes.gridRoot,\n                  row: classes.rowRoot,\n                  cell: classes.cellRoot,\n                }}\n                rows={rows}\n                columns={columns}\n                headerHeight={0}\n                isRowSelectable={(_) => false}\n                hideFooter\n              />\n            </div>\n          </CardContent>\n          <CardActions className={classes.cardActions}>\n            {!minimized && (\n              <Grid container direction=\"column\" spacing={2}>\n                <Grid item>\n                  <Grid container direction=\"row\" justifyContent=\"center\">\n                    <Button\n                      size=\"small\"\n                      onClick={() => {\n                        if (channel) {\n                          onSkipTalkgroup(channel.id);\n                        }\n                      }}\n                    >\n                      Skip\n                    </Button>\n                    <Button\n                      size=\"small\"\n                      onClick={() => {\n                        if (channel && channel.tgID) {\n                          onChannelHoldTalkgroup(channel.id, channel.tgID);\n                        }\n                      }}\n                    >\n                      Hold\n                    </Button>\n                    <Button\n                      size=\"small\"\n                      onClick={() => {\n                        if (channel) {\n                          onReloadChannel(channel.id);\n                        }\n                      }}\n                    >\n                      Reload\n                    </Button>\n                    <Button\n                      size=\"small\"\n                      onClick={() => {\n                        if (channel) {\n                          onGoToTalkgroup(channel.id);\n                        }\n                      }}\n                    >\n                      GOTO\n                    </Button>\n                    <Tooltip\n                      title=\"Blacklist\"\n                      placement=\"top\"\n                      enterDelay={500}\n                      onClick={() => {\n                        if (channel) {\n                          onBlacklistTalkgroup(\n                            channel.id,\n                            channel.tgID ? channel.tgID : 0\n                          );\n                        }\n                      }}\n                    >\n                      <Button size=\"small\">B/List</Button>\n                    </Tooltip>\n                    <Tooltip\n                      title=\"Whitelist\"\n                      placement=\"top\"\n                      enterDelay={500}\n                      onClick={() => {\n                        if (channel) {\n                          onWhitelistTalkgroup(\n                            channel.id,\n                            channel.tgID ? channel.tgID : 0\n                          );\n                        }\n                      }}\n                    >\n                      <Button size=\"small\">W/List</Button>\n                    </Tooltip>\n                    <Tooltip\n                      title=\"Log Verbosity\"\n                      placement=\"top\"\n                      enterDelay={500}\n                      onClick={() => {\n                        if (channel) {\n                          onLogVerboseChange(channel.id);\n                        }\n                      }}\n                    >\n                      <Button size=\"small\">Log/V</Button>\n                    </Tooltip>\n                  </Grid>\n                </Grid>\n                <Grid item>\n                  <Grid container direction=\"row\" justifyContent=\"center\">\n                    <Tooltip title={`-${stepSizeLarge}`} placement=\"top\">\n                      <IconButton\n                        size=\"small\"\n                        className={classes.actionbuttons}\n                      >\n                        <DoubleArrowsLeftIcon />\n                      </IconButton>\n                    </Tooltip>\n                    <Tooltip title={`-${stepSizeSmall}`} placement=\"top\">\n                      <IconButton\n                        size=\"small\"\n                        className={classes.actionbuttons}\n                      >\n                        <ArrowLeftIcon />\n                      </IconButton>\n                    </Tooltip>\n                    <Tooltip title={`+${stepSizeSmall}`} placement=\"top\">\n                      <IconButton\n                        size=\"small\"\n                        className={classes.actionbuttons}\n                      >\n                        <ArrowRightIcon />\n                      </IconButton>\n                    </Tooltip>\n                    <Tooltip title={`+${stepSizeLarge}`} placement=\"top\">\n                      <IconButton\n                        size=\"small\"\n                        className={classes.actionbuttons}\n                      >\n                        <DoubleArrowsRightIcon />\n                      </IconButton>\n                    </Tooltip>\n                    <Button size=\"small\" onClick={() => {}}>\n                      View Plot\n                    </Button>\n                  </Grid>\n                </Grid>\n              </Grid>\n            )}\n          </CardActions>\n        </>\n      )}\n    </Card>\n  );\n};\n\nexport default ChannelDisplay;\n","import { useState } from \"react\";\nimport { useAppSelector } from \"redux/app/hooks\";\nimport { selectSystem } from \"redux/slices/op25/op25Slice\";\nimport { selectIsDarkMode } from \"redux/slices/preferences/preferencesSlice\";\nimport { frequencyToString } from \"lib/op25\";\n\nimport {\n  Card,\n  CardContent,\n  Theme,\n  Typography,\n  IconButton,\n  CardHeader,\n  createStyles,\n  makeStyles,\n  Grid,\n  Icon,\n  Hidden,\n  useMediaQuery,\n  useTheme,\n} from \"@material-ui/core\";\n\nimport {\n  FiMinimize2 as MinimizeIcon,\n  FiMaximize2 as MaximizeIcon,\n  FiRadio as RadioIcon,\n} from \"react-icons/fi\";\nimport { formatDuration, intervalToDuration, sub } from \"date-fns\";\n\ntype SystemDisplayProps = {\n  className?: string | undefined;\n  systemId: number;\n};\n\ntype useStylesProps = {\n  isDarkMode: boolean;\n};\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      minWidth: 275,\n      border: \"0\",\n    },\n    cardContent: {\n      paddingRight: 15,\n      borderLeftStyle: (props: useStylesProps) =>\n        props.isDarkMode ? \"none\" : \"solid\",\n      borderRightStyle: (props: useStylesProps) =>\n        props.isDarkMode ? \"none\" : \"solid\",\n      borderWidth: 1,\n    },\n    cardHeader: {\n      backgroundColor: theme.palette.primary.main,\n      borderLeftStyle: (props: useStylesProps) =>\n        props.isDarkMode ? \"none\" : \"solid\",\n      borderRightStyle: (props: useStylesProps) =>\n        props.isDarkMode ? \"none\" : \"solid\",\n      borderTopStyle: (props: useStylesProps) =>\n        props.isDarkMode ? \"none\" : \"solid\",\n      borderWidth: 1,\n      borderColor: theme.palette.primary.main,\n      margin: \"0\",\n      textAlign: \"center\",\n      height: 30,\n      color: theme.palette.primary.contrastText,\n    },\n    cardHeaderActions: {\n      display: \"block\",\n      marginTop: -15,\n    },\n    currentsystem: {\n      marginLeft: 15,\n      marginBottom: 20,\n      overflow: \"auto\",\n      textAlign: \"center\",\n    },\n    table: {\n      width: \"100%\",\n      borderSpacing: 0,\n      borderTopWidth: 1,\n      borderTopStyle: \"solid\",\n      borderTopColor: (props: useStylesProps) =>\n        props.isDarkMode ? \"#666666\" : \"#CCCCCC\",\n    },\n    tableInfo: {\n      borderSpacing: 0,\n      borderTopWidth: 1,\n      borderTopStyle: \"solid\",\n      borderTopColor: (props: useStylesProps) =>\n        props.isDarkMode ? \"#666666\" : \"#CCCCCC\",\n      [theme.breakpoints.up(\"lg\")]: {\n        width: \"100%\",\n      },\n    },\n    tr: {\n      \"&:hover\": {\n        backgroundColor: (props: useStylesProps) =>\n          props.isDarkMode ? \"#515151\" : \"#F5F5F5\",\n      },\n    },\n    td: {\n      borderBottomWidth: 1,\n      borderBottomStyle: \"solid\",\n      borderBottomColor: (props: useStylesProps) =>\n        props.isDarkMode ? \"#666666\" : \"#CCCCCC\",\n      paddingTop: 15,\n      paddingBottom: 15,\n      paddingLeft: 10,\n      paddingRight: 10,\n    },\n    tdFrequency: {\n      borderBottomWidth: 1,\n      borderBottomStyle: \"solid\",\n      borderBottomColor: (props: useStylesProps) =>\n        props.isDarkMode ? \"#666666\" : \"#CCCCCC\",\n      paddingTop: 5,\n      paddingBottom: 5,\n      paddingLeft: 10,\n      paddingRight: 10,\n      textAlign: \"center\",\n    },\n    tdName: {\n      width: 110,\n      borderBottomWidth: 1,\n      borderBottomStyle: \"solid\",\n      borderBottomColor: (props: useStylesProps) =>\n        props.isDarkMode ? \"#666666\" : \"#CCCCCC\",\n      paddingTop: 15,\n      paddingBottom: 15,\n      textAlign: \"right\",\n    },\n    grid: {\n      minHeight: 260,\n    },\n    cardActions: {\n      paddingBottom: 20,\n      borderLeftStyle: (props: useStylesProps) =>\n        props.isDarkMode ? \"none\" : \"solid\",\n      borderRightStyle: (props: useStylesProps) =>\n        props.isDarkMode ? \"none\" : \"solid\",\n      borderBottomStyle: (props: useStylesProps) =>\n        props.isDarkMode ? \"none\" : \"solid\",\n      borderWidth: 1,\n      flexWrap: \"wrap\",\n      justifyContent: \"center\",\n    },\n    actionbuttons: {\n      paddingLeft: 15,\n      paddingRight: 15,\n    },\n  })\n);\n\nconst SystemDisplay = ({ className, systemId }: SystemDisplayProps) => {\n  const theme = useTheme();\n  const isMediumUpScreen = useMediaQuery(theme.breakpoints.up(\"md\"));\n  const system = useAppSelector(selectSystem(systemId));\n  const isDarkMode = useAppSelector(selectIsDarkMode);\n  const [minimized, setMinimized] = useState(false);\n  const classes = useStyles({\n    isDarkMode,\n  });\n\n  const getCardHeaderText = (): string => {\n    if (minimized) {\n      if (system) {\n        if (!isMediumUpScreen) {\n          return system.name ? system.name : \"-\";\n        } else {\n          return system.name || system.TopLine\n            ? `${system.name ? `${system.name} / ` : \"\"}${\n                system.TopLine ? system.TopLine : \"-\"\n              }`\n            : \"-\";\n        }\n      } else {\n        return \"-\";\n      }\n    } else {\n      return system ? (system.name ? system.name : \"-\") : \"-\";\n    }\n  };\n\n  const systemFrequency = system ? (\n    <span>\n      {system.rxFrequency ? frequencyToString(system.rxFrequency) : \"-\"}{\" \"}\n      &nbsp;/&nbsp;{\" \"}\n      {system.txFrequency ? frequencyToString(system.txFrequency) : \"-\"}\n    </span>\n  ) : (\n    <span>&ndash;</span>\n  );\n\n  const toggleMinimized = () => {\n    setMinimized(!minimized);\n  };\n\n  return (\n    <Card\n      className={`${classes.root}${\n        className !== undefined ? ` ${className}` : \"\"\n      }`}\n      variant=\"outlined\"\n    >\n      <CardHeader\n        title={getCardHeaderText()}\n        action={\n          <span className={classes.cardHeaderActions}>\n            <IconButton onClick={toggleMinimized}>\n              {minimized ? <MaximizeIcon /> : <MinimizeIcon />}\n            </IconButton>\n          </span>\n        }\n        className={classes.cardHeader}\n        titleTypographyProps={{ variant: \"subtitle2\" }}\n      />\n      {!minimized && (\n        <CardContent className={classes.cardContent}>\n          <Typography\n            className={classes.currentsystem}\n            variant=\"caption\"\n            component=\"h2\"\n          >\n            {system && system.TopLine ? system.TopLine : \"-\"}\n          </Typography>\n          <div className={classes.grid}>\n            <Grid container justifyContent=\"center\" spacing={2}>\n              <Grid item xs={12} md={6}>\n                <Typography\n                  className={classes.tableInfo}\n                  variant=\"caption\"\n                  component=\"table\"\n                >\n                  <tbody>\n                    <tr className={classes.tr}>\n                      <td className={classes.tdName}>WACN:</td>\n                      <td className={classes.td}>\n                        {system && system.wacn\n                          ? `0x${system.wacn.toString(16).toUpperCase()}`\n                          : \"-\"}\n                      </td>\n                    </tr>\n                    <tr className={classes.tr}>\n                      <td className={classes.tdName}>System ID:</td>\n                      <td className={classes.td}>\n                        {system && system.syid\n                          ? `0x${system.syid.toString(16).toUpperCase()}`\n                          : \"-\"}\n                      </td>\n                    </tr>\n                    <tr className={classes.tr}>\n                      <td className={classes.tdName}>NAC:</td>\n                      <td className={classes.td}>\n                        {system && system.nac\n                          ? `0x${system.nac.toString(16).toUpperCase()}`\n                          : \"-\"}\n                      </td>\n                    </tr>\n                    <tr className={classes.tr}>\n                      <td className={classes.tdName}>RFSS/Site:</td>\n                      <td className={classes.td}>\n                        {system && system.rfid\n                          ? `${system.rfid.toString()} (${system.rfid\n                              .toString(16)\n                              .toUpperCase()})`\n                          : \"-\"}{\" \"}\n                        &nbsp;/&nbsp;\n                        {system && system.stid\n                          ? `${system.stid\n                              .toString()\n                              .padStart(3, \"0\")} (${system.stid\n                              .toString(16)\n                              .toUpperCase()})`\n                          : \"-\"}\n                      </td>\n                    </tr>\n                    <tr className={classes.tr}>\n                      <td className={classes.tdName}>Rx/Tx Frequency:</td>\n                      <td className={classes.td}>{systemFrequency}</td>\n                    </tr>\n                    <tr className={classes.tr}>\n                      <td className={classes.tdName}>Secondary CC:</td>\n                      <td className={classes.td}>\n                        {system && system.secondaryFrequencies\n                          ? system.secondaryFrequencies.map((freq, index) =>\n                              index > 0\n                                ? `, ${frequencyToString(freq)}`\n                                : frequencyToString(freq)\n                            )\n                          : \"-\"}\n                      </td>\n                    </tr>\n                  </tbody>\n                </Typography>\n              </Grid>\n              <Grid item xs={12} lg={6}>\n                <Typography\n                  className={classes.table}\n                  variant=\"caption\"\n                  component=\"table\"\n                >\n                  <thead>\n                    <tr className={classes.tr}>\n                      <th className={classes.td}>Voice Frequency:</th>\n                      <th className={classes.td}>Last Used:</th>\n                      <th className={classes.td}>Active Talkgroup ID(s):</th>\n                      <th className={classes.td}>Count:</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {system?.frequencies?.map((frequency) => (\n                      <tr key={frequency.frequency} className={classes.tr}>\n                        <td className={classes.tdFrequency}>\n                          <Grid\n                            container\n                            justifyContent=\"space-around\"\n                            alignItems=\"center\"\n                            spacing={2}\n                          >\n                            <Hidden smDown>\n                              <Grid item>\n                                <Icon>\n                                  <RadioIcon />\n                                </Icon>\n                              </Grid>\n                            </Hidden>\n                            <Grid item>\n                              {frequencyToString(frequency.frequency)}\n                            </Grid>\n                          </Grid>\n                        </td>\n                        <td className={classes.tdFrequency}>\n                          {frequency.lastActivitySeconds\n                            ? formatDuration(\n                                intervalToDuration({\n                                  start: sub(new Date(Date.now()), {\n                                    seconds: frequency.lastActivitySeconds,\n                                  }),\n                                  end: new Date(Date.now()),\n                                }),\n                                {\n                                  format: [\n                                    \"years\",\n                                    \"days\",\n                                    \"hours\",\n                                    \"minutes\",\n                                    \"seconds\",\n                                  ],\n                                }\n                              )\n                            : \"-\"}\n                        </td>\n                        <td className={classes.tdFrequency}>\n                          {frequency.talkgroups\n                            ?.filter(\n                              (tg, index, arry) =>\n                                index === 0 ||\n                                arry.findIndex((t) => t.id === tg.id) === -1\n                            )\n                            .map((tg, index) =>\n                              tg.id\n                                ? index > 0\n                                  ? ` / [ ${tg.id.toString()} ]`\n                                  : `[ ${tg.id.toString()} ]`\n                                : \"-\"\n                            )}\n                        </td>\n                        <td className={classes.tdFrequency}>\n                          {frequency.counter && frequency.counter > 0\n                            ? frequency.counter.toString()\n                            : \"00\"}\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </Typography>\n              </Grid>\n            </Grid>\n          </div>\n        </CardContent>\n      )}\n    </Card>\n  );\n};\n\nexport default SystemDisplay;\n","import ChannelDisplay from \"components/ChannelDisplay\";\nimport { useAppSelector } from \"redux/app/hooks\";\nimport { selectChannels, selectSystems } from \"redux/slices/op25/op25Slice\";\nimport SystemDisplay from \"components/SystemDisplay\";\n\nimport {\n  createStyles,\n  Grid,\n  makeStyles,\n  Theme,\n  Typography,\n} from \"@material-ui/core\";\n\ntype MainUiProps = {\n  onChannelHoldTalkgroup: (channelId: number, channelTgId: number) => void;\n  onGoToTalkgroup: (channelId: number) => void;\n  onReloadChannel: (channelId: number) => void;\n  onBlacklistTalkgroup: (channelId: number, channelTgId: number) => void;\n  onWhitelistTalkgroup: (channelId: number, channelTgId: number) => void;\n  onLogVerboseChange: (channelId: number) => void;\n  onSkipTalkgroup: (channelId: number) => void;\n};\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    channelsHeadingText: {\n      color: theme.palette.getContrastText(theme.palette.background.default),\n      fontSize: \"2em\",\n      marginBottom: 15,\n    },\n    systemsHeadingText: {\n      color: theme.palette.getContrastText(theme.palette.background.default),\n      fontSize: \"2em\",\n      marginTop: 50,\n      marginBottom: 15,\n    },\n  })\n);\n\nconst MainUi = ({\n  onChannelHoldTalkgroup,\n  onGoToTalkgroup,\n  onReloadChannel,\n  onBlacklistTalkgroup,\n  onWhitelistTalkgroup,\n  onLogVerboseChange,\n  onSkipTalkgroup,\n}: MainUiProps) => {\n  const classes = useStyles();\n  const channels = useAppSelector(selectChannels);\n  const systems = useAppSelector(selectSystems);\n\n  return (\n    <>\n      <Typography component=\"h1\" className={classes.channelsHeadingText}>\n        Channels:\n      </Typography>\n      <Grid container spacing={2}>\n        {channels.map((channel) => (\n          <Grid item key={channel.id} xs={12} md={6}>\n            <ChannelDisplay\n              channelId={channel.id}\n              onChannelHoldTalkgroup={onChannelHoldTalkgroup}\n              onGoToTalkgroup={onGoToTalkgroup}\n              onReloadChannel={onReloadChannel}\n              onBlacklistTalkgroup={onBlacklistTalkgroup}\n              onWhitelistTalkgroup={onWhitelistTalkgroup}\n              onLogVerboseChange={onLogVerboseChange}\n              onSkipTalkgroup={onSkipTalkgroup}\n            />\n          </Grid>\n        ))}\n      </Grid>\n      <Typography component=\"h1\" className={classes.systemsHeadingText}>\n        Systems:\n      </Typography>\n      <Grid container spacing={2}>\n        {systems.map((system) => (\n          <Grid item key={system.id} xs={12}>\n            <SystemDisplay systemId={system.id} />\n          </Grid>\n        ))}\n      </Grid>\n    </>\n  );\n};\n\nexport default MainUi;\n","import { SyntheticEvent, useEffect, useState } from \"react\";\nimport { Alert } from \"@material-ui/lab\";\nimport { useAppSelector } from \"redux/app/hooks\";\nimport { getSystemsCount, isConnected } from \"redux/slices/op25/op25Slice\";\n\nimport { makeStyles, createStyles, Theme, Snackbar } from \"@material-ui/core\";\nimport { AXIOS_BASE_URL } from \"utils/axios\";\n\nconst useStyles = makeStyles((_theme: Theme) =>\n  createStyles({\n    spaced: {\n      marginBottom: 20,\n    },\n  })\n);\n\nconst GlobalAlerts = () => {\n  const [snackbarReconnectedOpen, setSnackbarReconnectedOpen] = useState(false);\n  const [holdAlerts, setHoldAlerts] = useState(true);\n  const isAppConnected = useAppSelector(isConnected);\n  const systemsCount = useAppSelector(getSystemsCount);\n  const classes = useStyles();\n\n  const openSnackbarReconnected = () => {\n    setSnackbarReconnectedOpen(true);\n  };\n\n  const closeSnackbarReconnected = () => {\n    setSnackbarReconnectedOpen(false);\n  };\n\n  useEffect(() => {\n    if (isAppConnected && !holdAlerts) {\n      openSnackbarReconnected();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isAppConnected]);\n\n  useEffect(() => {\n    // This prevents messages/alerts when the interface is first loaded.\n    setTimeout(() => {\n      setHoldAlerts(false);\n    }, 5000);\n  }, []);\n\n  const handleSnackbarReconnectedClose = (\n    _event?: SyntheticEvent,\n    reason?: string\n  ) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    closeSnackbarReconnected();\n  };\n\n  return (\n    <>\n      {!holdAlerts && isAppConnected !== undefined && !isAppConnected && (\n        <Alert className={classes.spaced} variant=\"filled\" severity=\"error\">\n          The OP25 web interface does not have a connection with the Python HTTP\n          server. Address attempted is: {AXIOS_BASE_URL}\n        </Alert>\n      )}\n      {!holdAlerts && isAppConnected && systemsCount === 0 && (\n        <Alert className={classes.spaced} variant=\"outlined\" severity=\"error\">\n          There are no available systems. Check the logs for a control channel\n          timeout.\n        </Alert>\n      )}\n      {snackbarReconnectedOpen && (\n        <Snackbar\n          open={snackbarReconnectedOpen}\n          autoHideDuration={6000}\n          onClose={handleSnackbarReconnectedClose}\n        >\n          <Alert\n            variant=\"filled\"\n            severity=\"success\"\n            onClose={handleSnackbarReconnectedClose}\n          >\n            OP25 web interface reconnected with Python HTTP server.\n          </Alert>\n        </Snackbar>\n      )}\n    </>\n  );\n};\n\nexport default GlobalAlerts;\n","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nconst ScrollToTop = () => {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n};\n\nexport default ScrollToTop;\n","import { useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport TopMenuBarAndDrawers from \"./components/TopMenuBarAndDrawers\";\nimport { useAppDispatch, useAppSelector } from \"redux/app/hooks\";\nimport { isMenuDrawerOpen } from \"redux/slices/interface/interfaceSlice\";\nimport ReceiverUi from \"pages/ReceiverUi\";\nimport { sendQueue } from \"redux/slices/op25/op25Slice\";\nimport { OP25 } from \"lib/op25\";\nimport GlobalAlerts from \"components/GlobalAlerts\";\n\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core\";\nimport ScrollToTop from \"components/ScrollToTop\";\n\ninterface useStylesProps {\n  isOpen: boolean;\n}\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    content: {\n      width: \"100%\",\n      [theme.breakpoints.down(\"xs\")]: {\n        paddingTop: 90,\n        paddingBottom: 20,\n        paddingLeft: 20,\n        paddingRight: 20,\n      },\n      [theme.breakpoints.up(\"sm\")]: {\n        paddingLeft: (props: useStylesProps) =>\n          props.isOpen && drawerWidth + 25,\n        paddingTop: 90,\n        paddingBottom: 25,\n        paddingRight: 25,\n      },\n    },\n    tempDebugContent: {\n      marginTop: 50,\n    },\n  })\n);\n\nconst App = () => {\n  const op25 = OP25.getInstance();\n  const dispatch = useAppDispatch();\n  const isOpen = useAppSelector(isMenuDrawerOpen);\n  const classes = useStyles({ isOpen });\n\n  const onChannelHoldTalkgroup = async (\n    channelId: number,\n    channelTgId: number\n  ) => {\n    await op25.sendHoldOnChannel(channelId, channelTgId);\n  };\n\n  // TODO: Create better prompt.\n  const onGoToTalkgroup = async (channelId: number) => {\n    const talkgroupId = prompt(\"Hold on what talkgroup ID?\");\n    if (talkgroupId) {\n      await op25.sendHoldOnChannel(channelId, Number.parseInt(talkgroupId));\n    }\n  };\n\n  const onReloadChannel = async (channelId: number) => {\n    await op25.sendReloadOnChannel(channelId);\n  };\n\n  // TODO: Create better prompt.\n  const onBlacklistTalkgroup = async (\n    channelId: number,\n    channelTgId: number\n  ) => {\n    const talkgroupId = prompt(\n      \"Blacklist what talkgroup ID?\",\n      channelTgId.toString()\n    );\n    if (talkgroupId) {\n      await op25.sendBlacklistOnChannel(\n        channelId,\n        Number.parseInt(talkgroupId)\n      );\n    }\n  };\n\n  // TODO: Create better prompt.\n  const onWhitelistTalkgroup = async (\n    channelId: number,\n    channelTgId: number\n  ) => {\n    const talkgroupId = prompt(\n      \"Whitelist what talkgroup ID?\",\n      channelTgId.toString()\n    );\n    if (talkgroupId) {\n      await op25.sendWhitelistOnChannel(\n        channelId,\n        Number.parseInt(talkgroupId)\n      );\n    }\n  };\n\n  // TODO: Create better prompt.\n  const onLogVerboseChange = async (channelId: number) => {\n    const verboseLevel = prompt(\"What log verbose level?\");\n    if (verboseLevel) {\n      await op25.sendSetDebugOnChannel(\n        channelId,\n        Number.parseInt(verboseLevel)\n      );\n    }\n  };\n  const onSkipTalkgroup = async (channelId: number) => {\n    await op25.sendSkipOnChannel(channelId);\n  };\n\n  useEffect(() => {\n    const updateTimer = setInterval(async () => {\n      op25.sendUpdateChannels();\n    }, 1000);\n\n    const sendQueueTimer = setInterval(async () => {\n      await dispatch(sendQueue());\n    }, 1000);\n\n    return () => {\n      clearInterval(updateTimer);\n      clearInterval(sendQueueTimer);\n    };\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Router>\n      <TopMenuBarAndDrawers />\n      <div className={classes.content}>\n        <GlobalAlerts />\n        <Switch>\n          <Route path=\"/\" exact>\n            <ScrollToTop />\n            <ReceiverUi\n              onChannelHoldTalkgroup={onChannelHoldTalkgroup}\n              onGoToTalkgroup={onGoToTalkgroup}\n              onReloadChannel={onReloadChannel}\n              onBlacklistTalkgroup={onBlacklistTalkgroup}\n              onWhitelistTalkgroup={onWhitelistTalkgroup}\n              onLogVerboseChange={onLogVerboseChange}\n              onSkipTalkgroup={onSkipTalkgroup}\n            />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\nimport interfaceReducer from \"../slices/interface/interfaceSlice\";\nimport op25Reducer from \"../slices/op25/op25Slice\";\nimport preferencesReducer from \"../slices/preferences/preferencesSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    interface: interfaceReducer,\n    op25: op25Reducer,\n    preferences: preferencesReducer,\n  },\n});\n\nexport const dummyData: RootState = {\n  interface: {\n    isMenuDrawerOpen: true,\n    isMobileMenuDrawerOpen: false,\n    isPreferencesDrawerOpen: false,\n  },\n  preferences: {\n    darkmode: true,\n  },\n  op25: {\n    isConnected: false,\n    channels: [\n      {\n        id: 1,\n        encrypted: false,\n        frequency: 856250000,\n        name: \"Dummy Channel\",\n        ppm: 0,\n        sourceAddress: 1234,\n        sourceTag: \"Dispatcher\",\n        systemName: \"Dummy System\",\n        tdma: false,\n        tgID: 123,\n        tgTag: \"Dummy Talkgroup\",\n      },\n      {\n        id: 2,\n        encrypted: true,\n        frequency: 856250000,\n        name: \"Acme Channel\",\n        ppm: 0,\n        sourceAddress: 9876,\n        sourceTag: \"Roadrunner\",\n        systemName: \"Acme Corp\",\n        tdma: true,\n        tgID: 999,\n        tgTag: \"Acme Outdoors Secure Talkgroup\",\n      },\n      {\n        id: 3,\n        encrypted: false,\n        frequency: 856250000,\n        name: \"State Patrol Channel\",\n        ppm: 0,\n        sourceAddress: 5463,\n        sourceTag: \"Trooper Allen\",\n        systemName: \"Statewide System\",\n        tdma: true,\n        tgID: 456,\n        tgTag: \"Section 1A Talkgroup\",\n      },\n    ],\n    systems: [],\n    terminalConfig: undefined,\n    send_queue: [{ command: \"get_config\", arg1: 0, arg2: 0 }],\n  },\n};\n\nexport const storeWithDummyData = configureStore({\n  reducer: {\n    interface: interfaceReducer,\n    op25: op25Reducer,\n    preferences: preferencesReducer,\n  },\n  preloadedState: dummyData,\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n\nexport type StoreType = typeof store;\n","import { createTheme, ThemeProvider } from \"@material-ui/core\";\nimport { useAppSelector } from \"./redux/app/hooks\";\nimport { selectIsDarkMode } from \"./redux/slices/preferences/preferencesSlice\";\n\nimport { blue } from \"@material-ui/core/colors\";\n\ninterface ThemeFuncProps {\n  useDarkMode?: boolean;\n}\n\ninterface ThemeComponentProps {\n  children: any;\n  theme?: \"default\" | \"light\" | \"dark\";\n}\n\nconst themeCreator = ({ useDarkMode }: ThemeFuncProps = {}) =>\n  createTheme({\n    palette: {\n      type: useDarkMode === false ? \"light\" : \"dark\",\n      secondary: {\n        main: blue[500],\n      },\n    },\n  });\n\nconst Theme = ({ children, theme = \"default\" }: ThemeComponentProps) => {\n  const preferencesDarkMode = useAppSelector(selectIsDarkMode);\n  const darkmode = theme === \"default\" ? preferencesDarkMode : theme === \"dark\";\n\n  return (\n    <ThemeProvider theme={themeCreator({ useDarkMode: darkmode })}>\n      {children}\n    </ThemeProvider>\n  );\n};\n\nexport default Theme;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { store } from \"./redux/app/store\";\nimport { Provider } from \"react-redux\";\nimport { CssBaseline } from \"@material-ui/core\";\nimport \"@fontsource/roboto\";\nimport Theme from \"./Theme\";\nimport { OP25 } from \"lib/op25\";\n\nconst appStore = store;\n\nOP25.getInstance().setStore(appStore);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={appStore}>\n      <Theme>\n        <CssBaseline />\n        <App />\n      </Theme>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}