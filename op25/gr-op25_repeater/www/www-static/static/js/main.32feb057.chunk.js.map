{"version":3,"sources":["redux/app/hooks.ts","redux/slices/interface/interfaceSlice.ts","components/MenuDrawer.tsx","components/AppBarWithToolbar.tsx","components/TopMenuBar.tsx","App.tsx","redux/slices/preferences/preferencesSlice.ts","redux/app/store.ts","Theme.tsx","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","initialState","activeFrequency","undefined","activeTalkgroup","activeGroupAddress","activeSourceAddress","isMenuDrawerOpen","isMobileMenuDrawerOpen","interfaceSlice","createSlice","name","reducers","gotoTalkgroup","state","action","payload","toString","toggleMenuDrawerOpen","setMenuDrawerOpen","toggleMobileMenuDrawerOpen","setMobileMenuDrawerOpen","actions","interface","useStyles","makeStyles","theme","createStyles","appBar","breakpoints","up","width","drawer","flexShrink","drawerPaper","toolbar","mixins","MenuDrawerContent","classes","AppBar","position","className","color","Toolbar","Typography","variant","noWrap","Divider","List","ListItem","button","selected","ListItemIcon","Home","ListItemText","PieChart","InfoRounded","container","globalThis","document","body","MenuDrawer","dispatch","isOpen","mobileOpen","useTheme","Hidden","smUp","implementation","SwipeableDrawer","anchor","direction","open","onOpen","onClose","paper","ModalProps","keepMounted","xsDown","Drawer","grow","flexGrow","props","marginLeft","menuButton","marginRight","spacing","down","display","mobileMenuButton","content","padding","AppBarWithToolbar","IconButton","edge","onClick","Menu","Settings","root","TopMenuBar","App","preferencesSlice","darkmode","toogleDarkMode","setDarkMode","selectIsDarkMode","preferences","store","configureStore","reducer","interfaceReducer","preferencesReducer","useDarkMode","createTheme","palette","type","Theme","children","ThemeProvider","ReactDOM","render","StrictMode","CssBaseline","getElementById"],"mappings":"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","file":"static/js/main.32feb057.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport type { RootState, AppDispatch } from \"./store\";\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"../../app/store\";\r\nimport { ActiveCall } from \"../../../models/ActiveCall\";\r\nimport { InterfaceState } from \"../../../models/InterfaceState\";\r\n\r\nconst initialState: InterfaceState = {\r\n  activeFrequency: undefined,\r\n  activeTalkgroup: undefined,\r\n  activeGroupAddress: undefined,\r\n  activeSourceAddress: undefined,\r\n  isMenuDrawerOpen: true,\r\n  isMobileMenuDrawerOpen: false,\r\n};\r\n\r\nexport const interfaceSlice = createSlice({\r\n  name: \"interface\",\r\n  initialState,\r\n  reducers: {\r\n    gotoTalkgroup: (state, action: PayloadAction<number>) => {\r\n      // TODO: Change to async thunk and call API.\r\n      state.activeTalkgroup = action.payload.toString(10);\r\n    },\r\n    toggleMenuDrawerOpen: (state) => {\r\n      state.isMenuDrawerOpen = !state.isMenuDrawerOpen;\r\n    },\r\n    setMenuDrawerOpen: (state, action: PayloadAction<boolean>) => {\r\n      state.isMenuDrawerOpen = action.payload;\r\n    },\r\n    toggleMobileMenuDrawerOpen: (state) => {\r\n      state.isMobileMenuDrawerOpen = !state.isMobileMenuDrawerOpen;\r\n    },\r\n    setMobileMenuDrawerOpen: (state, action: PayloadAction<boolean>) => {\r\n      state.isMobileMenuDrawerOpen = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  gotoTalkgroup,\r\n  toggleMenuDrawerOpen,\r\n  setMenuDrawerOpen,\r\n  toggleMobileMenuDrawerOpen,\r\n  setMobileMenuDrawerOpen,\r\n} = interfaceSlice.actions;\r\n\r\nexport const selectActiveCall = (state: RootState): ActiveCall => ({\r\n  activeFrequency: state.interface.activeFrequency,\r\n  activeTalkgroup: state.interface.activeTalkgroup,\r\n  activeGroupAddress: state.interface.activeGroupAddress,\r\n  activeSourceAddress: state.interface.activeSourceAddress,\r\n});\r\n\r\nexport const isMenuDrawerOpen = (state: RootState): boolean =>\r\n  state.interface.isMenuDrawerOpen;\r\n\r\nexport const isMobileMenuDrawerOpen = (state: RootState): boolean =>\r\n  state.interface.isMobileMenuDrawerOpen;\r\n\r\nexport default interfaceSlice.reducer;\r\n","import { useAppDispatch, useAppSelector } from \"../redux/app/hooks\";\r\nimport {\r\n  isMenuDrawerOpen,\r\n  isMobileMenuDrawerOpen,\r\n  setMenuDrawerOpen,\r\n  setMobileMenuDrawerOpen,\r\n} from \"../redux/slices/interface/interfaceSlice\";\r\n\r\nimport {\r\n  AppBar,\r\n  createStyles,\r\n  Divider,\r\n  Drawer,\r\n  Hidden,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  makeStyles,\r\n  SwipeableDrawer,\r\n  Theme,\r\n  Toolbar,\r\n  Typography,\r\n  useTheme,\r\n} from \"@material-ui/core\";\r\n\r\nimport {\r\n  Home as HomeIcon,\r\n  PieChart as PieChartIcon,\r\n  InfoRounded as InfoRoundedIcon,\r\n} from \"@material-ui/icons\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    appBar: {\r\n      [theme.breakpoints.up(\"sm\")]: {\r\n        width: `${drawerWidth}px`,\r\n      },\r\n    },\r\n    drawer: {\r\n      [theme.breakpoints.up(\"sm\")]: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n      },\r\n    },\r\n\r\n    drawerPaper: {\r\n      width: drawerWidth,\r\n    },\r\n    // necessary for content to be below app bar\r\n    toolbar: theme.mixins.toolbar,\r\n  })\r\n);\r\n\r\nconst MenuDrawerContent = () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <div>\r\n      <AppBar\r\n        position=\"relative\"\r\n        className={classes.appBar}\r\n        color=\"transparent\"\r\n      >\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" noWrap>\r\n            OP25 (BoatBod)\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Divider />\r\n      <List>\r\n        <ListItem button selected>\r\n          <ListItemIcon>\r\n            <HomeIcon />\r\n          </ListItemIcon>\r\n          <ListItemText>Receiver</ListItemText>\r\n        </ListItem>\r\n        <ListItem button>\r\n          <ListItemIcon>\r\n            <PieChartIcon />\r\n          </ListItemIcon>\r\n          <ListItemText>Plot</ListItemText>\r\n        </ListItem>\r\n      </List>\r\n      <Divider />\r\n      <List>\r\n        <ListItem button>\r\n          <ListItemIcon>\r\n            <InfoRoundedIcon />\r\n          </ListItemIcon>\r\n          <ListItemText>About</ListItemText>\r\n        </ListItem>\r\n      </List>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst container =\r\n  globalThis !== undefined ? () => globalThis.document.body : undefined;\r\n\r\nconst MenuDrawer = () => {\r\n  const dispatch = useAppDispatch();\r\n  const isOpen = useAppSelector(isMenuDrawerOpen);\r\n  const mobileOpen = useAppSelector(isMobileMenuDrawerOpen);\r\n  const classes = useStyles({ isOpen });\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <nav className={classes.drawer}>\r\n      <Hidden smUp implementation=\"css\">\r\n        <SwipeableDrawer\r\n          container={container}\r\n          variant=\"temporary\"\r\n          anchor={theme.direction === \"rtl\" ? \"right\" : \"left\"}\r\n          open={mobileOpen}\r\n          onOpen={() => {\r\n            dispatch(setMobileMenuDrawerOpen(true));\r\n          }}\r\n          onClose={() => {\r\n            dispatch(setMobileMenuDrawerOpen(false));\r\n          }}\r\n          classes={{\r\n            paper: classes.drawerPaper,\r\n          }}\r\n          ModalProps={{\r\n            keepMounted: true, // Better open performance on mobile.\r\n          }}\r\n        >\r\n          <MenuDrawerContent />\r\n        </SwipeableDrawer>\r\n      </Hidden>\r\n      <Hidden xsDown implementation=\"css\">\r\n        <Drawer\r\n          classes={{\r\n            paper: classes.drawerPaper,\r\n          }}\r\n          container={container}\r\n          variant=\"persistent\"\r\n          anchor={theme.direction === \"rtl\" ? \"right\" : \"left\"}\r\n          open={isOpen}\r\n          onClose={() => {\r\n            dispatch(setMenuDrawerOpen(false));\r\n          }}\r\n          ModalProps={{\r\n            keepMounted: true, // Better open performance on mobile.\r\n          }}\r\n        >\r\n          <MenuDrawerContent />\r\n        </Drawer>\r\n      </Hidden>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default MenuDrawer;\r\n","import { useAppDispatch, useAppSelector } from \"../redux/app/hooks\";\r\nimport {\r\n  isMenuDrawerOpen,\r\n  toggleMenuDrawerOpen,\r\n  toggleMobileMenuDrawerOpen,\r\n} from \"../redux/slices/interface/interfaceSlice\";\r\n\r\nimport {\r\n  AppBar,\r\n  createStyles,\r\n  IconButton,\r\n  makeStyles,\r\n  // MenuItem,\r\n  Theme,\r\n  Toolbar,\r\n} from \"@material-ui/core\";\r\n\r\nimport { Menu as MenuIcon, Settings as SettingsIcon } from \"@material-ui/icons\";\r\n\r\ninterface useStylesProps {\r\n  isOpen: boolean;\r\n}\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    grow: {\r\n      flexGrow: 1,\r\n    },\r\n    appBar: {\r\n      [theme.breakpoints.up(\"sm\")]: {\r\n        width: (props: useStylesProps) =>\r\n          props.isOpen && `calc(100% - ${drawerWidth}px)`,\r\n        marginLeft: (props: useStylesProps) => props.isOpen && drawerWidth,\r\n      },\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n      [theme.breakpoints.down(\"md\")]: {\r\n        display: \"none\",\r\n      },\r\n    },\r\n    mobileMenuButton: {\r\n      marginRight: theme.spacing(2),\r\n      [theme.breakpoints.up(\"sm\")]: {\r\n        display: \"none\",\r\n      },\r\n    },\r\n    content: {\r\n      flexGrow: 1,\r\n      padding: theme.spacing(3),\r\n    },\r\n  })\r\n);\r\n\r\nconst AppBarWithToolbar = () => {\r\n  const dispatch = useAppDispatch();\r\n  const isOpen = useAppSelector(isMenuDrawerOpen);\r\n  const classes = useStyles({ isOpen });\r\n\r\n  return (\r\n    <AppBar position=\"fixed\" className={classes.appBar}>\r\n      <Toolbar>\r\n        <IconButton\r\n          color=\"inherit\"\r\n          aria-label=\"open drawer\"\r\n          edge=\"start\"\r\n          onClick={() => {\r\n            dispatch(toggleMobileMenuDrawerOpen());\r\n          }}\r\n          className={classes.mobileMenuButton}\r\n        >\r\n          <MenuIcon />\r\n        </IconButton>\r\n        <IconButton\r\n          color=\"inherit\"\r\n          aria-label=\"open drawer\"\r\n          edge=\"start\"\r\n          onClick={() => {\r\n            dispatch(toggleMenuDrawerOpen());\r\n          }}\r\n          className={classes.menuButton}\r\n        >\r\n          <MenuIcon />\r\n        </IconButton>\r\n        {/* <MenuItem button>Skip</MenuItem>\r\n        <MenuItem button>Hold</MenuItem>\r\n        <MenuItem button>GoTo</MenuItem>\r\n        <MenuItem button>LockOut</MenuItem> */}\r\n        <div className={classes.grow} />\r\n        <IconButton color=\"inherit\" aria-label=\"preferences\" onClick={() => {}}>\r\n          <SettingsIcon />\r\n        </IconButton>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default AppBarWithToolbar;\r\n","import MenuDrawer from \"./MenuDrawer\";\r\nimport AppBarWithToolbar from \"./AppBarWithToolbar\";\r\n\r\nimport { createStyles, makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles(() =>\r\n  createStyles({\r\n    root: {\r\n      display: \"flex\",\r\n    },\r\n  })\r\n);\r\n\r\nconst TopMenuBar = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBarWithToolbar />\r\n      <MenuDrawer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TopMenuBar;\r\n","//import { useAppDispatch } from \"./redux/app/hooks\";\n//import { toogleDarkMode } from \"./redux/slices/preferences/preferencesSlice\";\n\nimport TopMenuBar from \"./components/TopMenuBar\";\n\nfunction App() {\n  // const dispatch = useAppDispatch();\n\n  return (\n    <>\n      <TopMenuBar />\n    </>\n  );\n}\n\nexport default App;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"../../app/store\";\r\nimport { PreferencesState } from \"../../../models/PreferencesState\";\r\n\r\nconst initialState: PreferencesState = {\r\n  darkmode: true,\r\n};\r\n\r\nexport const preferencesSlice = createSlice({\r\n  name: \"interface\",\r\n  initialState,\r\n  reducers: {\r\n    toogleDarkMode: (state) => {\r\n      state.darkmode = !state.darkmode;\r\n    },\r\n    setDarkMode: (state, action: PayloadAction<boolean>) => {\r\n      state.darkmode = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { toogleDarkMode, setDarkMode } = preferencesSlice.actions;\r\n\r\nexport const selectIsDarkMode = (state: RootState): boolean =>\r\n  state.preferences.darkmode;\r\n\r\nexport default preferencesSlice.reducer;\r\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\nimport interfaceReducer from \"../slices/interface/interfaceSlice\";\nimport preferencesReducer from \"../slices/preferences/preferencesSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    interface: interfaceReducer,\n    preferences: preferencesReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import { createTheme, ThemeProvider } from \"@material-ui/core\";\r\nimport { useAppSelector } from \"./redux/app/hooks\";\r\nimport { selectIsDarkMode } from \"./redux/slices/preferences/preferencesSlice\";\r\n\r\ninterface ThemeFuncProps {\r\n  useDarkMode?: boolean;\r\n}\r\n\r\ninterface ThemeComponentProps {\r\n  children: any;\r\n}\r\n\r\nconst theme = ({ useDarkMode }: ThemeFuncProps = {}) =>\r\n  createTheme({\r\n    palette: {\r\n      type: useDarkMode === false ? \"light\" : \"dark\",\r\n    },\r\n  });\r\n\r\nconst Theme = ({ children }: ThemeComponentProps) => {\r\n  const darkmode = useAppSelector(selectIsDarkMode);\r\n  return (\r\n    <ThemeProvider theme={theme({ useDarkMode: darkmode })}>\r\n      {children}\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default Theme;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { store } from \"./redux/app/store\";\nimport { Provider } from \"react-redux\";\nimport { CssBaseline } from \"@material-ui/core\";\nimport \"@fontsource/roboto\";\nimport Theme from \"./Theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Theme>\n        <CssBaseline />\n        <App />\n      </Theme>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}