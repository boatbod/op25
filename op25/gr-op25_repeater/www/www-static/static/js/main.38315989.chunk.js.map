{"version":3,"sources":["redux/app/hooks.ts","redux/slices/interface/interfaceSlice.ts","redux/slices/preferences/preferencesSlice.ts","components/MenuDrawer.tsx","components/AppBarWithToolbar.tsx","components/PreferencesDrawer.tsx","components/TopMenuBarAndDrawers.tsx","App.tsx","redux/app/store.ts","Theme.tsx","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","initialState","activeFrequency","undefined","activeTalkgroup","activeGroupAddress","activeSourceAddress","isMenuDrawerOpen","isMobileMenuDrawerOpen","isPreferencesDrawerOpen","interfaceSlice","createSlice","name","reducers","gotoTalkgroup","state","action","payload","toString","toggleMenuDrawerOpen","setMenuDrawerOpen","toggleMobileMenuDrawerOpen","setMobileMenuDrawerOpen","togglePreferencesDrawerOpen","setPreferencesDrawerOpen","actions","interface","isPreferencesOpen","preferencesSlice","darkmode","toogleDarkMode","setDarkMode","selectIsDarkMode","preferences","useStyles","makeStyles","theme","createStyles","drawer","breakpoints","up","width","flexShrink","drawerPaper","toolbar","mixins","MenuDrawerContent","isDarkMode","AppBar","position","color","Toolbar","Typography","variant","noWrap","Divider","List","ListItem","button","selected","ListItemIcon","Home","ListItemText","PieChart","InfoRounded","container","globalThis","document","body","MenuDrawer","dispatch","isOpen","mobileOpen","classes","useTheme","className","Hidden","smUp","implementation","SwipeableDrawer","anchor","direction","open","onOpen","onClose","paper","ModalProps","keepMounted","xsDown","Drawer","grow","flexGrow","appBar","props","marginLeft","menuButton","marginRight","spacing","down","display","mobileMenuButton","content","padding","AppBarWithToolbar","IconButton","edge","onClick","Menu","Settings","gridSpace","paddingLeft","preferencesHeader","palette","common","white","blue","PreferencesDrawer","Grid","item","xs","justify","Close","FormGroup","FormControlLabel","control","Switch","checked","onChange","e","target","label","root","TopMenuBarAndDrawers","App","store","configureStore","reducer","interfaceReducer","preferencesReducer","useDarkMode","createTheme","type","secondary","main","Theme","children","ThemeProvider","ReactDOM","render","StrictMode","CssBaseline","getElementById"],"mappings":"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","file":"static/js/main.38315989.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport type { RootState, AppDispatch } from \"./store\";\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"../../app/store\";\r\nimport { ActiveCall } from \"../../../models/ActiveCall\";\r\nimport { InterfaceState } from \"../../../models/InterfaceState\";\r\n\r\nconst initialState: InterfaceState = {\r\n  activeFrequency: undefined,\r\n  activeTalkgroup: undefined,\r\n  activeGroupAddress: undefined,\r\n  activeSourceAddress: undefined,\r\n  isMenuDrawerOpen: true,\r\n  isMobileMenuDrawerOpen: false,\r\n  isPreferencesDrawerOpen: false,\r\n};\r\n\r\nexport const interfaceSlice = createSlice({\r\n  name: \"interface\",\r\n  initialState,\r\n  reducers: {\r\n    gotoTalkgroup: (state, action: PayloadAction<number>) => {\r\n      // TODO: Change to async thunk and call API.\r\n      state.activeTalkgroup = action.payload.toString(10);\r\n    },\r\n    toggleMenuDrawerOpen: (state) => {\r\n      state.isMenuDrawerOpen = !state.isMenuDrawerOpen;\r\n    },\r\n    setMenuDrawerOpen: (state, action: PayloadAction<boolean>) => {\r\n      state.isMenuDrawerOpen = action.payload;\r\n    },\r\n    toggleMobileMenuDrawerOpen: (state) => {\r\n      state.isMobileMenuDrawerOpen = !state.isMobileMenuDrawerOpen;\r\n    },\r\n    setMobileMenuDrawerOpen: (state, action: PayloadAction<boolean>) => {\r\n      state.isMobileMenuDrawerOpen = action.payload;\r\n    },\r\n    togglePreferencesDrawerOpen: (state) => {\r\n      state.isPreferencesDrawerOpen = !state.isPreferencesDrawerOpen;\r\n    },\r\n    setPreferencesDrawerOpen: (state, action: PayloadAction<boolean>) => {\r\n      state.isPreferencesDrawerOpen = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  gotoTalkgroup,\r\n  toggleMenuDrawerOpen,\r\n  setMenuDrawerOpen,\r\n  toggleMobileMenuDrawerOpen,\r\n  setMobileMenuDrawerOpen,\r\n  togglePreferencesDrawerOpen,\r\n  setPreferencesDrawerOpen,\r\n} = interfaceSlice.actions;\r\n\r\nexport const selectActiveCall = (state: RootState): ActiveCall => ({\r\n  activeFrequency: state.interface.activeFrequency,\r\n  activeTalkgroup: state.interface.activeTalkgroup,\r\n  activeGroupAddress: state.interface.activeGroupAddress,\r\n  activeSourceAddress: state.interface.activeSourceAddress,\r\n});\r\n\r\nexport const isMenuDrawerOpen = (state: RootState): boolean =>\r\n  state.interface.isMenuDrawerOpen;\r\n\r\nexport const isMobileMenuDrawerOpen = (state: RootState): boolean =>\r\n  state.interface.isMobileMenuDrawerOpen;\r\n\r\nexport const isPreferencesOpen = (state: RootState): boolean =>\r\n  state.interface.isPreferencesDrawerOpen;\r\n\r\nexport default interfaceSlice.reducer;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"../../app/store\";\r\nimport { PreferencesState } from \"../../../models/PreferencesState\";\r\n\r\nconst initialState: PreferencesState = {\r\n  darkmode: true,\r\n};\r\n\r\nexport const preferencesSlice = createSlice({\r\n  name: \"interface\",\r\n  initialState,\r\n  reducers: {\r\n    toogleDarkMode: (state) => {\r\n      state.darkmode = !state.darkmode;\r\n    },\r\n    setDarkMode: (state, action: PayloadAction<boolean>) => {\r\n      state.darkmode = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { toogleDarkMode, setDarkMode } = preferencesSlice.actions;\r\n\r\nexport const selectIsDarkMode = (state: RootState): boolean =>\r\n  state.preferences.darkmode;\r\n\r\nexport default preferencesSlice.reducer;\r\n","import { useAppDispatch, useAppSelector } from \"../redux/app/hooks\";\r\nimport {\r\n  isMenuDrawerOpen,\r\n  isMobileMenuDrawerOpen,\r\n  setMenuDrawerOpen,\r\n  setMobileMenuDrawerOpen,\r\n} from \"../redux/slices/interface/interfaceSlice\";\r\n\r\nimport {\r\n  AppBar,\r\n  createStyles,\r\n  Divider,\r\n  Drawer,\r\n  Hidden,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  makeStyles,\r\n  SwipeableDrawer,\r\n  Theme,\r\n  Toolbar,\r\n  Typography,\r\n  useTheme,\r\n} from \"@material-ui/core\";\r\n\r\nimport {\r\n  Home as HomeIcon,\r\n  PieChart as PieChartIcon,\r\n  InfoRounded as InfoRoundedIcon,\r\n} from \"@material-ui/icons\";\r\nimport { selectIsDarkMode } from \"../redux/slices/preferences/preferencesSlice\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    drawer: {\r\n      [theme.breakpoints.up(\"sm\")]: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n      },\r\n    },\r\n\r\n    drawerPaper: {\r\n      width: drawerWidth,\r\n    },\r\n    // necessary for content to be below app bar\r\n    toolbar: theme.mixins.toolbar,\r\n  })\r\n);\r\n\r\nconst MenuDrawerContent = () => {\r\n  const isDarkMode = useAppSelector(selectIsDarkMode);\r\n\r\n  return (\r\n    <div>\r\n      <AppBar\r\n        position=\"relative\"\r\n        color={isDarkMode ? \"transparent\" : \"primary\"}\r\n      >\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" noWrap>\r\n            OP25 (Boatbod)\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Divider />\r\n      <List>\r\n        <ListItem button selected>\r\n          <ListItemIcon>\r\n            <HomeIcon />\r\n          </ListItemIcon>\r\n          <ListItemText>Receiver</ListItemText>\r\n        </ListItem>\r\n        <ListItem button>\r\n          <ListItemIcon>\r\n            <PieChartIcon />\r\n          </ListItemIcon>\r\n          <ListItemText>Plot</ListItemText>\r\n        </ListItem>\r\n      </List>\r\n      <Divider />\r\n      <List>\r\n        <ListItem button>\r\n          <ListItemIcon>\r\n            <InfoRoundedIcon />\r\n          </ListItemIcon>\r\n          <ListItemText>About</ListItemText>\r\n        </ListItem>\r\n      </List>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst container =\r\n  globalThis !== undefined ? () => globalThis.document.body : undefined;\r\n\r\nconst MenuDrawer = () => {\r\n  const dispatch = useAppDispatch();\r\n  const isOpen = useAppSelector(isMenuDrawerOpen);\r\n  const mobileOpen = useAppSelector(isMobileMenuDrawerOpen);\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <nav className={classes.drawer}>\r\n      <Hidden smUp implementation=\"css\">\r\n        <SwipeableDrawer\r\n          container={container}\r\n          variant=\"temporary\"\r\n          anchor={theme.direction === \"rtl\" ? \"right\" : \"left\"}\r\n          open={mobileOpen}\r\n          onOpen={() => {\r\n            dispatch(setMobileMenuDrawerOpen(true));\r\n          }}\r\n          onClose={() => {\r\n            dispatch(setMobileMenuDrawerOpen(false));\r\n          }}\r\n          classes={{\r\n            paper: classes.drawerPaper,\r\n          }}\r\n          ModalProps={{\r\n            keepMounted: true, // Better open performance on mobile.\r\n          }}\r\n        >\r\n          <MenuDrawerContent />\r\n        </SwipeableDrawer>\r\n      </Hidden>\r\n      <Hidden xsDown implementation=\"css\">\r\n        <Drawer\r\n          classes={{\r\n            paper: classes.drawerPaper,\r\n          }}\r\n          container={container}\r\n          variant=\"persistent\"\r\n          anchor={theme.direction === \"rtl\" ? \"right\" : \"left\"}\r\n          open={isOpen}\r\n          onClose={() => {\r\n            dispatch(setMenuDrawerOpen(false));\r\n          }}\r\n          ModalProps={{\r\n            keepMounted: true, // Better open performance on mobile.\r\n          }}\r\n        >\r\n          <MenuDrawerContent />\r\n        </Drawer>\r\n      </Hidden>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default MenuDrawer;\r\n","import { useAppDispatch, useAppSelector } from \"../redux/app/hooks\";\r\nimport {\r\n  isMenuDrawerOpen,\r\n  toggleMenuDrawerOpen,\r\n  toggleMobileMenuDrawerOpen,\r\n  togglePreferencesDrawerOpen,\r\n} from \"../redux/slices/interface/interfaceSlice\";\r\n\r\nimport {\r\n  AppBar,\r\n  createStyles,\r\n  IconButton,\r\n  makeStyles,\r\n  // MenuItem,\r\n  Theme,\r\n  Toolbar,\r\n} from \"@material-ui/core\";\r\n\r\nimport { Menu as MenuIcon, Settings as SettingsIcon } from \"@material-ui/icons\";\r\n\r\ninterface useStylesProps {\r\n  isOpen: boolean;\r\n}\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    grow: {\r\n      flexGrow: 1,\r\n    },\r\n    appBar: {\r\n      [theme.breakpoints.up(\"sm\")]: {\r\n        width: (props: useStylesProps) =>\r\n          props.isOpen && `calc(100% - ${drawerWidth}px)`,\r\n        marginLeft: (props: useStylesProps) => props.isOpen && drawerWidth,\r\n      },\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n      [theme.breakpoints.down(\"md\")]: {\r\n        display: \"none\",\r\n      },\r\n    },\r\n    mobileMenuButton: {\r\n      marginRight: theme.spacing(2),\r\n      [theme.breakpoints.up(\"sm\")]: {\r\n        display: \"none\",\r\n      },\r\n    },\r\n    content: {\r\n      flexGrow: 1,\r\n      padding: theme.spacing(3),\r\n    },\r\n  })\r\n);\r\n\r\nconst AppBarWithToolbar = () => {\r\n  const dispatch = useAppDispatch();\r\n  const isOpen = useAppSelector(isMenuDrawerOpen);\r\n  const classes = useStyles({ isOpen });\r\n\r\n  return (\r\n    <AppBar position=\"fixed\" className={classes.appBar}>\r\n      <Toolbar>\r\n        <IconButton\r\n          color=\"inherit\"\r\n          aria-label=\"open drawer\"\r\n          edge=\"start\"\r\n          onClick={() => {\r\n            dispatch(toggleMobileMenuDrawerOpen());\r\n          }}\r\n          className={classes.mobileMenuButton}\r\n        >\r\n          <MenuIcon />\r\n        </IconButton>\r\n        <IconButton\r\n          color=\"inherit\"\r\n          aria-label=\"open drawer\"\r\n          edge=\"start\"\r\n          onClick={() => {\r\n            dispatch(toggleMenuDrawerOpen());\r\n          }}\r\n          className={classes.menuButton}\r\n        >\r\n          <MenuIcon />\r\n        </IconButton>\r\n        {/* <MenuItem button>Skip</MenuItem>\r\n        <MenuItem button>Hold</MenuItem>\r\n        <MenuItem button>GoTo</MenuItem>\r\n        <MenuItem button>LockOut</MenuItem> */}\r\n        <div className={classes.grow} />\r\n        <IconButton\r\n          color=\"inherit\"\r\n          aria-label=\"preferences\"\r\n          onClick={() => {\r\n            dispatch(togglePreferencesDrawerOpen());\r\n          }}\r\n        >\r\n          <SettingsIcon />\r\n        </IconButton>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default AppBarWithToolbar;\r\n","import { useAppDispatch, useAppSelector } from \"../redux/app/hooks\";\r\nimport {\r\n  isPreferencesOpen,\r\n  setPreferencesDrawerOpen,\r\n} from \"../redux/slices/interface/interfaceSlice\";\r\nimport {\r\n  selectIsDarkMode,\r\n  setDarkMode,\r\n} from \"../redux/slices/preferences/preferencesSlice\";\r\n\r\nimport {\r\n  AppBar,\r\n  createStyles,\r\n  Divider,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  Grid,\r\n  IconButton,\r\n  makeStyles,\r\n  SwipeableDrawer,\r\n  Switch,\r\n  Theme,\r\n  Toolbar,\r\n  Typography,\r\n  useTheme,\r\n} from \"@material-ui/core\";\r\n\r\nimport { Close as CloseIcon } from \"@material-ui/icons\";\r\n\r\nimport { blue } from \"@material-ui/core/colors\";\r\n\r\nconst drawerWidth = 260;\r\n\r\ninterface StylesProps {\r\n  isDarkMode: boolean;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    appBar: {\r\n      [theme.breakpoints.up(\"sm\")]: {\r\n        width: `${drawerWidth}px`,\r\n      },\r\n    },\r\n    drawer: {\r\n      [theme.breakpoints.up(\"sm\")]: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n      },\r\n    },\r\n    gridSpace: {\r\n      paddingLeft: theme.spacing(2),\r\n    },\r\n    drawerPaper: {\r\n      width: drawerWidth,\r\n    },\r\n    preferencesHeader: {\r\n      color: (props: StylesProps) =>\r\n        props.isDarkMode ? theme.palette.common.white : blue[800],\r\n    },\r\n    // necessary for content to be below app bar\r\n    toolbar: theme.mixins.toolbar,\r\n  })\r\n);\r\n\r\nconst container =\r\n  globalThis !== undefined ? () => globalThis.document.body : undefined;\r\n\r\nconst PreferencesDrawer = () => {\r\n  const dispatch = useAppDispatch();\r\n  const isOpen = useAppSelector(isPreferencesOpen);\r\n  const isDarkMode = useAppSelector(selectIsDarkMode);\r\n  const classes = useStyles({ isDarkMode });\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <nav className={classes.drawer}>\r\n      <SwipeableDrawer\r\n        container={container}\r\n        variant=\"temporary\"\r\n        anchor={theme.direction === \"rtl\" ? \"left\" : \"right\"}\r\n        open={isOpen}\r\n        onClose={() => {\r\n          dispatch(setPreferencesDrawerOpen(false));\r\n        }}\r\n        onOpen={() => {\r\n          dispatch(setPreferencesDrawerOpen(true));\r\n        }}\r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}\r\n        ModalProps={{\r\n          keepMounted: true, // Better open performance on mobile.\r\n        }}\r\n      >\r\n        <AppBar\r\n          position=\"relative\"\r\n          className={classes.appBar}\r\n          color={isDarkMode ? \"transparent\" : \"primary\"}\r\n        >\r\n          <Toolbar></Toolbar>\r\n        </AppBar>\r\n        <Divider />\r\n        <Grid className={classes.gridSpace} container spacing={0}>\r\n          <Grid item xs={12}>\r\n            <Grid container justify=\"flex-end\">\r\n              <IconButton\r\n                onClick={() => {\r\n                  dispatch(setPreferencesDrawerOpen(false));\r\n                }}\r\n              >\r\n                <CloseIcon />\r\n              </IconButton>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <Typography className={classes.preferencesHeader} variant=\"h6\">\r\n              Theme\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <FormGroup>\r\n              <FormControlLabel\r\n                control={\r\n                  <Switch\r\n                    checked={isDarkMode}\r\n                    onChange={(e) => {\r\n                      dispatch(setDarkMode(e.target.checked));\r\n                    }}\r\n                    name=\"darkModeEnabled\"\r\n                  />\r\n                }\r\n                label=\"Dark Mode\"\r\n              />\r\n            </FormGroup>\r\n          </Grid>\r\n        </Grid>\r\n      </SwipeableDrawer>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default PreferencesDrawer;\r\n","import MenuDrawer from \"./MenuDrawer\";\r\nimport AppBarWithToolbar from \"./AppBarWithToolbar\";\r\n\r\nimport { createStyles, makeStyles } from \"@material-ui/core\";\r\nimport PreferencesDrawer from \"./PreferencesDrawer\";\r\n\r\nconst useStyles = makeStyles(() =>\r\n  createStyles({\r\n    root: {\r\n      display: \"flex\",\r\n    },\r\n  })\r\n);\r\n\r\nconst TopMenuBarAndDrawers = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBarWithToolbar />\r\n      <MenuDrawer />\r\n      <PreferencesDrawer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TopMenuBarAndDrawers;\r\n","//import { useAppDispatch } from \"./redux/app/hooks\";\n//import { toogleDarkMode } from \"./redux/slices/preferences/preferencesSlice\";\n\nimport TopMenuBarAndDrawers from \"./components/TopMenuBarAndDrawers\";\n\nfunction App() {\n  // const dispatch = useAppDispatch();\n\n  return (\n    <>\n      <TopMenuBarAndDrawers />\n    </>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\nimport interfaceReducer from \"../slices/interface/interfaceSlice\";\nimport preferencesReducer from \"../slices/preferences/preferencesSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    interface: interfaceReducer,\n    preferences: preferencesReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import { createTheme, ThemeProvider } from \"@material-ui/core\";\r\nimport { useAppSelector } from \"./redux/app/hooks\";\r\nimport { selectIsDarkMode } from \"./redux/slices/preferences/preferencesSlice\";\r\n\r\nimport { blue } from \"@material-ui/core/colors\";\r\n\r\ninterface ThemeFuncProps {\r\n  useDarkMode?: boolean;\r\n}\r\n\r\ninterface ThemeComponentProps {\r\n  children: any;\r\n}\r\n\r\nconst theme = ({ useDarkMode }: ThemeFuncProps = {}) =>\r\n  createTheme({\r\n    palette: {\r\n      type: useDarkMode === false ? \"light\" : \"dark\",\r\n      secondary: {\r\n        main: blue[500],\r\n      },\r\n    },\r\n  });\r\n\r\nconst Theme = ({ children }: ThemeComponentProps) => {\r\n  const darkmode = useAppSelector(selectIsDarkMode);\r\n  return (\r\n    <ThemeProvider theme={theme({ useDarkMode: darkmode })}>\r\n      {children}\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default Theme;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { store } from \"./redux/app/store\";\nimport { Provider } from \"react-redux\";\nimport { CssBaseline } from \"@material-ui/core\";\nimport \"@fontsource/roboto\";\nimport Theme from \"./Theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Theme>\n        <CssBaseline />\n        <App />\n      </Theme>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}